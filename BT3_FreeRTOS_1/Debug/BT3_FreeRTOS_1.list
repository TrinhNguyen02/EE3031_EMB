
BT3_FreeRTOS_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003880  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08003990  08003990  00013990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a78  08003a78  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003a78  08003a78  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a78  08003a78  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a78  08003a78  00013a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a7c  08003a7c  00013a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003a80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001014  20000010  08003a90  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001024  08003a90  00021024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc5c  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002314  00000000  00000000  0002dc95  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ba8  00000000  00000000  0002ffb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ad0  00000000  00000000  00030b58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018001  00000000  00000000  00031628  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009b33  00000000  00000000  00049629  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00089a4a  00000000  00000000  0005315c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dcba6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ea0  00000000  00000000  000dcc24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08003978 	.word	0x08003978

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08003978 	.word	0x08003978

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000002c 	.word	0x2000002c
 800017c:	20000080 	.word	0x20000080

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b09a      	sub	sp, #104	; 0x68
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fb39 	bl	80007fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f85d 	bl	8000248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f8cb 	bl	8000328 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000192:	f000 f89f 	bl	80002d4 <MX_USART1_UART_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 16, uint16_t);
 8000196:	4b24      	ldr	r3, [pc, #144]	; (8000228 <main+0xa8>)
 8000198:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800019c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800019e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 80001a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80001a6:	2100      	movs	r1, #0
 80001a8:	4618      	mov	r0, r3
 80001aa:	f001 fc71 	bl	8001a90 <osMessageCreate>
 80001ae:	4602      	mov	r2, r0
 80001b0:	4b1e      	ldr	r3, [pc, #120]	; (800022c <main+0xac>)
 80001b2:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Control_LED */
  osThreadDef(Control_LED, StartDefaultTask, osPriorityNormal, 0, 128);
 80001b4:	4b1e      	ldr	r3, [pc, #120]	; (8000230 <main+0xb0>)
 80001b6:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80001ba:	461d      	mov	r5, r3
 80001bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Control_LEDHandle = osThreadCreate(osThread(Control_LED), NULL);
 80001c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80001cc:	2100      	movs	r1, #0
 80001ce:	4618      	mov	r0, r3
 80001d0:	f001 fbfe 	bl	80019d0 <osThreadCreate>
 80001d4:	4602      	mov	r2, r0
 80001d6:	4b17      	ldr	r3, [pc, #92]	; (8000234 <main+0xb4>)
 80001d8:	601a      	str	r2, [r3, #0]

  /* definition and creation of Switch_Status */
  osThreadDef(Switch_Status, StartTask02, osPriorityNormal, 0, 128);
 80001da:	4b17      	ldr	r3, [pc, #92]	; (8000238 <main+0xb8>)
 80001dc:	f107 0420 	add.w	r4, r7, #32
 80001e0:	461d      	mov	r5, r3
 80001e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Switch_StatusHandle = osThreadCreate(osThread(Switch_Status), NULL);
 80001ee:	f107 0320 	add.w	r3, r7, #32
 80001f2:	2100      	movs	r1, #0
 80001f4:	4618      	mov	r0, r3
 80001f6:	f001 fbeb 	bl	80019d0 <osThreadCreate>
 80001fa:	4602      	mov	r2, r0
 80001fc:	4b0f      	ldr	r3, [pc, #60]	; (800023c <main+0xbc>)
 80001fe:	601a      	str	r2, [r3, #0]

  /* definition and creation of Com_UART */
  osThreadDef(Com_UART, StartTask03, osPriorityNormal, 0, 128);
 8000200:	4b0f      	ldr	r3, [pc, #60]	; (8000240 <main+0xc0>)
 8000202:	1d3c      	adds	r4, r7, #4
 8000204:	461d      	mov	r5, r3
 8000206:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000208:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800020a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800020e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Com_UARTHandle = osThreadCreate(osThread(Com_UART), NULL);
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f001 fbda 	bl	80019d0 <osThreadCreate>
 800021c:	4602      	mov	r2, r0
 800021e:	4b09      	ldr	r3, [pc, #36]	; (8000244 <main+0xc4>)
 8000220:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000222:	f001 fbce 	bl	80019c2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000226:	e7fe      	b.n	8000226 <main+0xa6>
 8000228:	08003990 	.word	0x08003990
 800022c:	20001018 	.word	0x20001018
 8000230:	080039ac 	.word	0x080039ac
 8000234:	20000fd0 	.word	0x20000fd0
 8000238:	080039d8 	.word	0x080039d8
 800023c:	2000101c 	.word	0x2000101c
 8000240:	08003a00 	.word	0x08003a00
 8000244:	20000fcc 	.word	0x20000fcc

08000248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b090      	sub	sp, #64	; 0x40
 800024c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	f107 0318 	add.w	r3, r7, #24
 8000252:	2228      	movs	r2, #40	; 0x28
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f003 fb73 	bl	8003942 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
 8000268:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800026a:	2301      	movs	r3, #1
 800026c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800026e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000272:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000278:	2301      	movs	r3, #1
 800027a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027c:	2302      	movs	r3, #2
 800027e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000280:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000284:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000286:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800028a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028c:	f107 0318 	add.w	r3, r7, #24
 8000290:	4618      	mov	r0, r3
 8000292:	f000 fd9b 	bl	8000dcc <HAL_RCC_OscConfig>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800029c:	f000 f9d8 	bl	8000650 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a0:	230f      	movs	r3, #15
 80002a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a4:	2302      	movs	r3, #2
 80002a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	2102      	movs	r1, #2
 80002ba:	4618      	mov	r0, r3
 80002bc:	f001 f806 	bl	80012cc <HAL_RCC_ClockConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002c6:	f000 f9c3 	bl	8000650 <Error_Handler>
  }
}
 80002ca:	bf00      	nop
 80002cc:	3740      	adds	r7, #64	; 0x40
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
	...

080002d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002d8:	4b11      	ldr	r3, [pc, #68]	; (8000320 <MX_USART1_UART_Init+0x4c>)
 80002da:	4a12      	ldr	r2, [pc, #72]	; (8000324 <MX_USART1_UART_Init+0x50>)
 80002dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002de:	4b10      	ldr	r3, [pc, #64]	; (8000320 <MX_USART1_UART_Init+0x4c>)
 80002e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002e6:	4b0e      	ldr	r3, [pc, #56]	; (8000320 <MX_USART1_UART_Init+0x4c>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002ec:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <MX_USART1_UART_Init+0x4c>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002f2:	4b0b      	ldr	r3, [pc, #44]	; (8000320 <MX_USART1_UART_Init+0x4c>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002f8:	4b09      	ldr	r3, [pc, #36]	; (8000320 <MX_USART1_UART_Init+0x4c>)
 80002fa:	220c      	movs	r2, #12
 80002fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002fe:	4b08      	ldr	r3, [pc, #32]	; (8000320 <MX_USART1_UART_Init+0x4c>)
 8000300:	2200      	movs	r2, #0
 8000302:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <MX_USART1_UART_Init+0x4c>)
 8000306:	2200      	movs	r2, #0
 8000308:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800030a:	4805      	ldr	r0, [pc, #20]	; (8000320 <MX_USART1_UART_Init+0x4c>)
 800030c:	f001 f97a 	bl	8001604 <HAL_UART_Init>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000316:	f000 f99b 	bl	8000650 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000fd4 	.word	0x20000fd4
 8000324:	40013800 	.word	0x40013800

08000328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b088      	sub	sp, #32
 800032c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032e:	f107 0310 	add.w	r3, r7, #16
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]
 8000338:	609a      	str	r2, [r3, #8]
 800033a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800033c:	4b3a      	ldr	r3, [pc, #232]	; (8000428 <MX_GPIO_Init+0x100>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	4a39      	ldr	r2, [pc, #228]	; (8000428 <MX_GPIO_Init+0x100>)
 8000342:	f043 0310 	orr.w	r3, r3, #16
 8000346:	6193      	str	r3, [r2, #24]
 8000348:	4b37      	ldr	r3, [pc, #220]	; (8000428 <MX_GPIO_Init+0x100>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	f003 0310 	and.w	r3, r3, #16
 8000350:	60fb      	str	r3, [r7, #12]
 8000352:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000354:	4b34      	ldr	r3, [pc, #208]	; (8000428 <MX_GPIO_Init+0x100>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	4a33      	ldr	r2, [pc, #204]	; (8000428 <MX_GPIO_Init+0x100>)
 800035a:	f043 0320 	orr.w	r3, r3, #32
 800035e:	6193      	str	r3, [r2, #24]
 8000360:	4b31      	ldr	r3, [pc, #196]	; (8000428 <MX_GPIO_Init+0x100>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	f003 0320 	and.w	r3, r3, #32
 8000368:	60bb      	str	r3, [r7, #8]
 800036a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800036c:	4b2e      	ldr	r3, [pc, #184]	; (8000428 <MX_GPIO_Init+0x100>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	4a2d      	ldr	r2, [pc, #180]	; (8000428 <MX_GPIO_Init+0x100>)
 8000372:	f043 0304 	orr.w	r3, r3, #4
 8000376:	6193      	str	r3, [r2, #24]
 8000378:	4b2b      	ldr	r3, [pc, #172]	; (8000428 <MX_GPIO_Init+0x100>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f003 0304 	and.w	r3, r3, #4
 8000380:	607b      	str	r3, [r7, #4]
 8000382:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000384:	4b28      	ldr	r3, [pc, #160]	; (8000428 <MX_GPIO_Init+0x100>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	4a27      	ldr	r2, [pc, #156]	; (8000428 <MX_GPIO_Init+0x100>)
 800038a:	f043 0308 	orr.w	r3, r3, #8
 800038e:	6193      	str	r3, [r2, #24]
 8000390:	4b25      	ldr	r3, [pc, #148]	; (8000428 <MX_GPIO_Init+0x100>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	f003 0308 	and.w	r3, r3, #8
 8000398:	603b      	str	r3, [r7, #0]
 800039a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800039c:	2200      	movs	r2, #0
 800039e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003a2:	4822      	ldr	r0, [pc, #136]	; (800042c <MX_GPIO_Init+0x104>)
 80003a4:	f000 fce1 	bl	8000d6a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2104      	movs	r1, #4
 80003ac:	4820      	ldr	r0, [pc, #128]	; (8000430 <MX_GPIO_Init+0x108>)
 80003ae:	f000 fcdc 	bl	8000d6a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b8:	2301      	movs	r3, #1
 80003ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003bc:	2300      	movs	r3, #0
 80003be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c0:	2302      	movs	r3, #2
 80003c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003c4:	f107 0310 	add.w	r3, r7, #16
 80003c8:	4619      	mov	r1, r3
 80003ca:	4818      	ldr	r0, [pc, #96]	; (800042c <MX_GPIO_Init+0x104>)
 80003cc:	f000 fb5c 	bl	8000a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80003d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80003d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003d6:	2300      	movs	r3, #0
 80003d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003da:	2301      	movs	r3, #1
 80003dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003de:	f107 0310 	add.w	r3, r7, #16
 80003e2:	4619      	mov	r1, r3
 80003e4:	4811      	ldr	r0, [pc, #68]	; (800042c <MX_GPIO_Init+0x104>)
 80003e6:	f000 fb4f 	bl	8000a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80003ea:	2301      	movs	r3, #1
 80003ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003ee:	2300      	movs	r3, #0
 80003f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003f2:	2301      	movs	r3, #1
 80003f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003f6:	f107 0310 	add.w	r3, r7, #16
 80003fa:	4619      	mov	r1, r3
 80003fc:	480d      	ldr	r0, [pc, #52]	; (8000434 <MX_GPIO_Init+0x10c>)
 80003fe:	f000 fb43 	bl	8000a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000402:	2304      	movs	r3, #4
 8000404:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000406:	2301      	movs	r3, #1
 8000408:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040a:	2300      	movs	r3, #0
 800040c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040e:	2302      	movs	r3, #2
 8000410:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000412:	f107 0310 	add.w	r3, r7, #16
 8000416:	4619      	mov	r1, r3
 8000418:	4805      	ldr	r0, [pc, #20]	; (8000430 <MX_GPIO_Init+0x108>)
 800041a:	f000 fb35 	bl	8000a88 <HAL_GPIO_Init>

}
 800041e:	bf00      	nop
 8000420:	3720      	adds	r7, #32
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40021000 	.word	0x40021000
 800042c:	40011000 	.word	0x40011000
 8000430:	40010c00 	.word	0x40010c00
 8000434:	40010800 	.word	0x40010800

08000438 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	uint8_t led_state = 0; // Initially LED is off
 8000440:	2300      	movs	r3, #0
 8000442:	73fb      	strb	r3, [r7, #15]
  for(;;)
  {
     if (xQueueReceive(myQueue01Handle, &led_state, portMAX_DELAY) == pdPASS) {
 8000444:	4b14      	ldr	r3, [pc, #80]	; (8000498 <StartDefaultTask+0x60>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	f107 010f 	add.w	r1, r7, #15
 800044c:	f04f 32ff 	mov.w	r2, #4294967295
 8000450:	4618      	mov	r0, r3
 8000452:	f001 fe25 	bl	80020a0 <xQueueReceive>
 8000456:	4603      	mov	r3, r0
 8000458:	2b01      	cmp	r3, #1
 800045a:	d118      	bne.n	800048e <StartDefaultTask+0x56>
    	 if(led_state == 1) {
 800045c:	7bfb      	ldrb	r3, [r7, #15]
 800045e:	2b01      	cmp	r3, #1
 8000460:	d105      	bne.n	800046e <StartDefaultTask+0x36>
    		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);
 8000462:	2201      	movs	r2, #1
 8000464:	2104      	movs	r1, #4
 8000466:	480d      	ldr	r0, [pc, #52]	; (800049c <StartDefaultTask+0x64>)
 8000468:	f000 fc7f 	bl	8000d6a <HAL_GPIO_WritePin>
 800046c:	e00f      	b.n	800048e <StartDefaultTask+0x56>
    	 }
    	 else if (led_state == 0) {
 800046e:	7bfb      	ldrb	r3, [r7, #15]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d105      	bne.n	8000480 <StartDefaultTask+0x48>
    		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 8000474:	2200      	movs	r2, #0
 8000476:	2104      	movs	r1, #4
 8000478:	4808      	ldr	r0, [pc, #32]	; (800049c <StartDefaultTask+0x64>)
 800047a:	f000 fc76 	bl	8000d6a <HAL_GPIO_WritePin>
 800047e:	e006      	b.n	800048e <StartDefaultTask+0x56>
    	 }
    	 else if (led_state == 2) {
 8000480:	7bfb      	ldrb	r3, [r7, #15]
 8000482:	2b02      	cmp	r3, #2
 8000484:	d103      	bne.n	800048e <StartDefaultTask+0x56>
    		 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8000486:	2104      	movs	r1, #4
 8000488:	4804      	ldr	r0, [pc, #16]	; (800049c <StartDefaultTask+0x64>)
 800048a:	f000 fc86 	bl	8000d9a <HAL_GPIO_TogglePin>
    	 }
     }
      osDelay(1);
 800048e:	2001      	movs	r0, #1
 8000490:	f001 faea 	bl	8001a68 <osDelay>
     if (xQueueReceive(myQueue01Handle, &led_state, portMAX_DELAY) == pdPASS) {
 8000494:	e7d6      	b.n	8000444 <StartDefaultTask+0xc>
 8000496:	bf00      	nop
 8000498:	20001018 	.word	0x20001018
 800049c:	40010c00 	.word	0x40010c00

080004a0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
	uint8_t switchStatus = 1;
 80004a8:	2301      	movs	r3, #1
 80004aa:	73fb      	strb	r3, [r7, #15]

  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) == RESET){
 80004ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004b0:	4812      	ldr	r0, [pc, #72]	; (80004fc <StartTask02+0x5c>)
 80004b2:	f000 fc43 	bl	8000d3c <HAL_GPIO_ReadPin>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d11b      	bne.n	80004f4 <StartTask02+0x54>
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80004bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004c0:	480e      	ldr	r0, [pc, #56]	; (80004fc <StartTask02+0x5c>)
 80004c2:	f000 fc6a 	bl	8000d9a <HAL_GPIO_TogglePin>
		  switchStatus = 2;
 80004c6:	2302      	movs	r3, #2
 80004c8:	73fb      	strb	r3, [r7, #15]
		  xQueueSend(myQueue01Handle, &switchStatus, portMAX_DELAY);
 80004ca:	4b0d      	ldr	r3, [pc, #52]	; (8000500 <StartTask02+0x60>)
 80004cc:	6818      	ldr	r0, [r3, #0]
 80004ce:	f107 010f 	add.w	r1, r7, #15
 80004d2:	2300      	movs	r3, #0
 80004d4:	f04f 32ff 	mov.w	r2, #4294967295
 80004d8:	f001 fce8 	bl	8001eac <xQueueGenericSend>
		  osDelay(100);
 80004dc:	2064      	movs	r0, #100	; 0x64
 80004de:	f001 fac3 	bl	8001a68 <osDelay>
		  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) == RESET);
 80004e2:	bf00      	nop
 80004e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004e8:	4804      	ldr	r0, [pc, #16]	; (80004fc <StartTask02+0x5c>)
 80004ea:	f000 fc27 	bl	8000d3c <HAL_GPIO_ReadPin>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d0f7      	beq.n	80004e4 <StartTask02+0x44>
	  }
	  osDelay(1);
 80004f4:	2001      	movs	r0, #1
 80004f6:	f001 fab7 	bl	8001a68 <osDelay>
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) == RESET){
 80004fa:	e7d7      	b.n	80004ac <StartTask02+0xc>
 80004fc:	40011000 	.word	0x40011000
 8000500:	20001018 	.word	0x20001018

08000504 <StartTask03>:
*/


/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
	char rxBuffer[LENGTH_BF_MAX];
	int index = 0;
 800050c:	2300      	movs	r3, #0
 800050e:	61fb      	str	r3, [r7, #28]
  for(;;)
  {
	    while(1) {
	        if (HAL_UART_Receive(&huart1, (uint8_t*)&rxBuffer[index], 1, portMAX_DELAY) == HAL_OK) {
 8000510:	f107 020c 	add.w	r2, r7, #12
 8000514:	69fb      	ldr	r3, [r7, #28]
 8000516:	18d1      	adds	r1, r2, r3
 8000518:	f04f 33ff 	mov.w	r3, #4294967295
 800051c:	2201      	movs	r2, #1
 800051e:	4839      	ldr	r0, [pc, #228]	; (8000604 <StartTask03+0x100>)
 8000520:	f001 f8bd 	bl	800169e <HAL_UART_Receive>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d1f2      	bne.n	8000510 <StartTask03+0xc>

	        		if (strncmp(rxBuffer, "ON\\CR\\LF",10) == 0) {
 800052a:	f107 030c 	add.w	r3, r7, #12
 800052e:	220a      	movs	r2, #10
 8000530:	4935      	ldr	r1, [pc, #212]	; (8000608 <StartTask03+0x104>)
 8000532:	4618      	mov	r0, r3
 8000534:	f003 fa0d 	bl	8003952 <strncmp>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d118      	bne.n	8000570 <StartTask03+0x6c>
	                	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800053e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000542:	4832      	ldr	r0, [pc, #200]	; (800060c <StartTask03+0x108>)
 8000544:	f000 fc29 	bl	8000d9a <HAL_GPIO_TogglePin>
	                    uint8_t on_command = 1;
 8000548:	2301      	movs	r3, #1
 800054a:	72fb      	strb	r3, [r7, #11]
	                    xQueueSend(myQueue01Handle, &on_command, portMAX_DELAY);
 800054c:	4b30      	ldr	r3, [pc, #192]	; (8000610 <StartTask03+0x10c>)
 800054e:	6818      	ldr	r0, [r3, #0]
 8000550:	f107 010b 	add.w	r1, r7, #11
 8000554:	2300      	movs	r3, #0
 8000556:	f04f 32ff 	mov.w	r2, #4294967295
 800055a:	f001 fca7 	bl	8001eac <xQueueGenericSend>
		                index = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	61fb      	str	r3, [r7, #28]
		                clearMsg(rxBuffer,LENGTH_BF_MAX);
 8000562:	f107 030c 	add.w	r3, r7, #12
 8000566:	210f      	movs	r1, #15
 8000568:	4618      	mov	r0, r3
 800056a:	f000 f857 	bl	800061c <clearMsg>
 800056e:	e7cf      	b.n	8000510 <StartTask03+0xc>
	                }
	                else if (strncmp(rxBuffer, "OFF\\CR\\LF",11) == 0) {
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	220b      	movs	r2, #11
 8000576:	4927      	ldr	r1, [pc, #156]	; (8000614 <StartTask03+0x110>)
 8000578:	4618      	mov	r0, r3
 800057a:	f003 f9ea 	bl	8003952 <strncmp>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d118      	bne.n	80005b6 <StartTask03+0xb2>
	                	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000584:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000588:	4820      	ldr	r0, [pc, #128]	; (800060c <StartTask03+0x108>)
 800058a:	f000 fc06 	bl	8000d9a <HAL_GPIO_TogglePin>
	                    uint8_t on_command = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	72bb      	strb	r3, [r7, #10]
	                    xQueueSend(myQueue01Handle, &on_command, portMAX_DELAY);
 8000592:	4b1f      	ldr	r3, [pc, #124]	; (8000610 <StartTask03+0x10c>)
 8000594:	6818      	ldr	r0, [r3, #0]
 8000596:	f107 010a 	add.w	r1, r7, #10
 800059a:	2300      	movs	r3, #0
 800059c:	f04f 32ff 	mov.w	r2, #4294967295
 80005a0:	f001 fc84 	bl	8001eac <xQueueGenericSend>
		                index = 0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61fb      	str	r3, [r7, #28]
		                clearMsg(rxBuffer,LENGTH_BF_MAX);
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	210f      	movs	r1, #15
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 f834 	bl	800061c <clearMsg>
 80005b4:	e7ac      	b.n	8000510 <StartTask03+0xc>
	                }
	                else if (strncmp(rxBuffer, "TOGGLE\\CR\\LF",14) == 0) {
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	220e      	movs	r2, #14
 80005bc:	4916      	ldr	r1, [pc, #88]	; (8000618 <StartTask03+0x114>)
 80005be:	4618      	mov	r0, r3
 80005c0:	f003 f9c7 	bl	8003952 <strncmp>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d118      	bne.n	80005fc <StartTask03+0xf8>
	                	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80005ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ce:	480f      	ldr	r0, [pc, #60]	; (800060c <StartTask03+0x108>)
 80005d0:	f000 fbe3 	bl	8000d9a <HAL_GPIO_TogglePin>
	                    uint8_t on_command = 2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	727b      	strb	r3, [r7, #9]
	                    xQueueSend(myQueue01Handle, &on_command, portMAX_DELAY);
 80005d8:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <StartTask03+0x10c>)
 80005da:	6818      	ldr	r0, [r3, #0]
 80005dc:	f107 0109 	add.w	r1, r7, #9
 80005e0:	2300      	movs	r3, #0
 80005e2:	f04f 32ff 	mov.w	r2, #4294967295
 80005e6:	f001 fc61 	bl	8001eac <xQueueGenericSend>
		                index = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61fb      	str	r3, [r7, #28]
		                clearMsg(rxBuffer,LENGTH_BF_MAX);
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	210f      	movs	r1, #15
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 f811 	bl	800061c <clearMsg>
 80005fa:	e789      	b.n	8000510 <StartTask03+0xc>
	                }
	                else  index++;
 80005fc:	69fb      	ldr	r3, [r7, #28]
 80005fe:	3301      	adds	r3, #1
 8000600:	61fb      	str	r3, [r7, #28]
	        if (HAL_UART_Receive(&huart1, (uint8_t*)&rxBuffer[index], 1, portMAX_DELAY) == HAL_OK) {
 8000602:	e785      	b.n	8000510 <StartTask03+0xc>
 8000604:	20000fd4 	.word	0x20000fd4
 8000608:	08003a1c 	.word	0x08003a1c
 800060c:	40011000 	.word	0x40011000
 8000610:	20001018 	.word	0x20001018
 8000614:	08003a28 	.word	0x08003a28
 8000618:	08003a34 	.word	0x08003a34

0800061c <clearMsg>:
	    }
    osDelay(1);
  }
  /* USER CODE END StartTask03 */
}
void clearMsg(char* arr, int len){
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < len ; i++){
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	e008      	b.n	800063e <clearMsg+0x22>
		*arr = '\0';
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	2200      	movs	r2, #0
 8000630:	701a      	strb	r2, [r3, #0]
		arr++;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	3301      	adds	r3, #1
 8000636:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < len ; i++){
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	3301      	adds	r3, #1
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	68fa      	ldr	r2, [r7, #12]
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	429a      	cmp	r2, r3
 8000644:	dbf2      	blt.n	800062c <clearMsg+0x10>
	}
}
 8000646:	bf00      	nop
 8000648:	3714      	adds	r7, #20
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr

08000650 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000654:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000656:	e7fe      	b.n	8000656 <Error_Handler+0x6>

08000658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800065e:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <HAL_MspInit+0x68>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	4a17      	ldr	r2, [pc, #92]	; (80006c0 <HAL_MspInit+0x68>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6193      	str	r3, [r2, #24]
 800066a:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <HAL_MspInit+0x68>)
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000676:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <HAL_MspInit+0x68>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	4a11      	ldr	r2, [pc, #68]	; (80006c0 <HAL_MspInit+0x68>)
 800067c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000680:	61d3      	str	r3, [r2, #28]
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <HAL_MspInit+0x68>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	210f      	movs	r1, #15
 8000692:	f06f 0001 	mvn.w	r0, #1
 8000696:	f000 f9ce 	bl	8000a36 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800069a:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <HAL_MspInit+0x6c>)
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	4a04      	ldr	r2, [pc, #16]	; (80006c4 <HAL_MspInit+0x6c>)
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b6:	bf00      	nop
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40021000 	.word	0x40021000
 80006c4:	40010000 	.word	0x40010000

080006c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b088      	sub	sp, #32
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d0:	f107 0310 	add.w	r3, r7, #16
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a1c      	ldr	r2, [pc, #112]	; (8000754 <HAL_UART_MspInit+0x8c>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d131      	bne.n	800074c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006e8:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <HAL_UART_MspInit+0x90>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	4a1a      	ldr	r2, [pc, #104]	; (8000758 <HAL_UART_MspInit+0x90>)
 80006ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f2:	6193      	str	r3, [r2, #24]
 80006f4:	4b18      	ldr	r3, [pc, #96]	; (8000758 <HAL_UART_MspInit+0x90>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000700:	4b15      	ldr	r3, [pc, #84]	; (8000758 <HAL_UART_MspInit+0x90>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	4a14      	ldr	r2, [pc, #80]	; (8000758 <HAL_UART_MspInit+0x90>)
 8000706:	f043 0304 	orr.w	r3, r3, #4
 800070a:	6193      	str	r3, [r2, #24]
 800070c:	4b12      	ldr	r3, [pc, #72]	; (8000758 <HAL_UART_MspInit+0x90>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f003 0304 	and.w	r3, r3, #4
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000718:	f44f 7300 	mov.w	r3, #512	; 0x200
 800071c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071e:	2302      	movs	r3, #2
 8000720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000722:	2303      	movs	r3, #3
 8000724:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000726:	f107 0310 	add.w	r3, r7, #16
 800072a:	4619      	mov	r1, r3
 800072c:	480b      	ldr	r0, [pc, #44]	; (800075c <HAL_UART_MspInit+0x94>)
 800072e:	f000 f9ab 	bl	8000a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000736:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	4619      	mov	r1, r3
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <HAL_UART_MspInit+0x94>)
 8000748:	f000 f99e 	bl	8000a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800074c:	bf00      	nop
 800074e:	3720      	adds	r7, #32
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40013800 	.word	0x40013800
 8000758:	40021000 	.word	0x40021000
 800075c:	40010800 	.word	0x40010800

08000760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <NMI_Handler+0x4>

08000766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <HardFault_Handler+0x4>

0800076c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <MemManage_Handler+0x4>

08000772 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <BusFault_Handler+0x4>

08000778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <UsageFault_Handler+0x4>

0800077e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr

0800078a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800078e:	f000 f87b 	bl	8000888 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000792:	f002 fc27 	bl	8002fe4 <xTaskGetSchedulerState>
 8000796:	4603      	mov	r3, r0
 8000798:	2b01      	cmp	r3, #1
 800079a:	d001      	beq.n	80007a0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800079c:	f002 fe8c 	bl	80034b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr

080007b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b0:	480c      	ldr	r0, [pc, #48]	; (80007e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007b2:	490d      	ldr	r1, [pc, #52]	; (80007e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007b4:	4a0d      	ldr	r2, [pc, #52]	; (80007ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b8:	e002      	b.n	80007c0 <LoopCopyDataInit>

080007ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007be:	3304      	adds	r3, #4

080007c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c4:	d3f9      	bcc.n	80007ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007c6:	4a0a      	ldr	r2, [pc, #40]	; (80007f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007c8:	4c0a      	ldr	r4, [pc, #40]	; (80007f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007cc:	e001      	b.n	80007d2 <LoopFillZerobss>

080007ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d0:	3204      	adds	r2, #4

080007d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d4:	d3fb      	bcc.n	80007ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007d6:	f7ff ffe5 	bl	80007a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007da:	f003 f883 	bl	80038e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007de:	f7ff fccf 	bl	8000180 <main>
  bx lr
 80007e2:	4770      	bx	lr
  ldr r0, =_sdata
 80007e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80007ec:	08003a80 	.word	0x08003a80
  ldr r2, =_sbss
 80007f0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80007f4:	20001024 	.word	0x20001024

080007f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f8:	e7fe      	b.n	80007f8 <ADC1_2_IRQHandler>
	...

080007fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <HAL_Init+0x28>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a07      	ldr	r2, [pc, #28]	; (8000824 <HAL_Init+0x28>)
 8000806:	f043 0310 	orr.w	r3, r3, #16
 800080a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800080c:	2003      	movs	r0, #3
 800080e:	f000 f907 	bl	8000a20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000812:	200f      	movs	r0, #15
 8000814:	f000 f808 	bl	8000828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000818:	f7ff ff1e 	bl	8000658 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800081c:	2300      	movs	r3, #0
}
 800081e:	4618      	mov	r0, r3
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40022000 	.word	0x40022000

08000828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <HAL_InitTick+0x54>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <HAL_InitTick+0x58>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	4619      	mov	r1, r3
 800083a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800083e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000842:	fbb2 f3f3 	udiv	r3, r2, r3
 8000846:	4618      	mov	r0, r3
 8000848:	f000 f911 	bl	8000a6e <HAL_SYSTICK_Config>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000852:	2301      	movs	r3, #1
 8000854:	e00e      	b.n	8000874 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2b0f      	cmp	r3, #15
 800085a:	d80a      	bhi.n	8000872 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800085c:	2200      	movs	r2, #0
 800085e:	6879      	ldr	r1, [r7, #4]
 8000860:	f04f 30ff 	mov.w	r0, #4294967295
 8000864:	f000 f8e7 	bl	8000a36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000868:	4a06      	ldr	r2, [pc, #24]	; (8000884 <HAL_InitTick+0x5c>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800086e:	2300      	movs	r3, #0
 8000870:	e000      	b.n	8000874 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000872:	2301      	movs	r3, #1
}
 8000874:	4618      	mov	r0, r3
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000000 	.word	0x20000000
 8000880:	20000008 	.word	0x20000008
 8000884:	20000004 	.word	0x20000004

08000888 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800088c:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <HAL_IncTick+0x1c>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	461a      	mov	r2, r3
 8000892:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <HAL_IncTick+0x20>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4413      	add	r3, r2
 8000898:	4a03      	ldr	r2, [pc, #12]	; (80008a8 <HAL_IncTick+0x20>)
 800089a:	6013      	str	r3, [r2, #0]
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr
 80008a4:	20000008 	.word	0x20000008
 80008a8:	20001020 	.word	0x20001020

080008ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  return uwTick;
 80008b0:	4b02      	ldr	r3, [pc, #8]	; (80008bc <HAL_GetTick+0x10>)
 80008b2:	681b      	ldr	r3, [r3, #0]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr
 80008bc:	20001020 	.word	0x20001020

080008c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f003 0307 	and.w	r3, r3, #7
 80008ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <__NVIC_SetPriorityGrouping+0x44>)
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008d6:	68ba      	ldr	r2, [r7, #8]
 80008d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008dc:	4013      	ands	r3, r2
 80008de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008f2:	4a04      	ldr	r2, [pc, #16]	; (8000904 <__NVIC_SetPriorityGrouping+0x44>)
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	60d3      	str	r3, [r2, #12]
}
 80008f8:	bf00      	nop
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800090c:	4b04      	ldr	r3, [pc, #16]	; (8000920 <__NVIC_GetPriorityGrouping+0x18>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	0a1b      	lsrs	r3, r3, #8
 8000912:	f003 0307 	and.w	r3, r3, #7
}
 8000916:	4618      	mov	r0, r3
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	6039      	str	r1, [r7, #0]
 800092e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000934:	2b00      	cmp	r3, #0
 8000936:	db0a      	blt.n	800094e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	b2da      	uxtb	r2, r3
 800093c:	490c      	ldr	r1, [pc, #48]	; (8000970 <__NVIC_SetPriority+0x4c>)
 800093e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000942:	0112      	lsls	r2, r2, #4
 8000944:	b2d2      	uxtb	r2, r2
 8000946:	440b      	add	r3, r1
 8000948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800094c:	e00a      	b.n	8000964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	b2da      	uxtb	r2, r3
 8000952:	4908      	ldr	r1, [pc, #32]	; (8000974 <__NVIC_SetPriority+0x50>)
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	f003 030f 	and.w	r3, r3, #15
 800095a:	3b04      	subs	r3, #4
 800095c:	0112      	lsls	r2, r2, #4
 800095e:	b2d2      	uxtb	r2, r2
 8000960:	440b      	add	r3, r1
 8000962:	761a      	strb	r2, [r3, #24]
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000e100 	.word	0xe000e100
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000978:	b480      	push	{r7}
 800097a:	b089      	sub	sp, #36	; 0x24
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f003 0307 	and.w	r3, r3, #7
 800098a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	f1c3 0307 	rsb	r3, r3, #7
 8000992:	2b04      	cmp	r3, #4
 8000994:	bf28      	it	cs
 8000996:	2304      	movcs	r3, #4
 8000998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	3304      	adds	r3, #4
 800099e:	2b06      	cmp	r3, #6
 80009a0:	d902      	bls.n	80009a8 <NVIC_EncodePriority+0x30>
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	3b03      	subs	r3, #3
 80009a6:	e000      	b.n	80009aa <NVIC_EncodePriority+0x32>
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ac:	f04f 32ff 	mov.w	r2, #4294967295
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	43da      	mvns	r2, r3
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	401a      	ands	r2, r3
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c0:	f04f 31ff 	mov.w	r1, #4294967295
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ca:	43d9      	mvns	r1, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d0:	4313      	orrs	r3, r2
         );
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3724      	adds	r7, #36	; 0x24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr

080009dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009ec:	d301      	bcc.n	80009f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ee:	2301      	movs	r3, #1
 80009f0:	e00f      	b.n	8000a12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009f2:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <SysTick_Config+0x40>)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009fa:	210f      	movs	r1, #15
 80009fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000a00:	f7ff ff90 	bl	8000924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a04:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <SysTick_Config+0x40>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a0a:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <SysTick_Config+0x40>)
 8000a0c:	2207      	movs	r2, #7
 8000a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	e000e010 	.word	0xe000e010

08000a20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f7ff ff49 	bl	80008c0 <__NVIC_SetPriorityGrouping>
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b086      	sub	sp, #24
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	60b9      	str	r1, [r7, #8]
 8000a40:	607a      	str	r2, [r7, #4]
 8000a42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a48:	f7ff ff5e 	bl	8000908 <__NVIC_GetPriorityGrouping>
 8000a4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	68b9      	ldr	r1, [r7, #8]
 8000a52:	6978      	ldr	r0, [r7, #20]
 8000a54:	f7ff ff90 	bl	8000978 <NVIC_EncodePriority>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a5e:	4611      	mov	r1, r2
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ff5f 	bl	8000924 <__NVIC_SetPriority>
}
 8000a66:	bf00      	nop
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f7ff ffb0 	bl	80009dc <SysTick_Config>
 8000a7c:	4603      	mov	r3, r0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b08b      	sub	sp, #44	; 0x2c
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a96:	2300      	movs	r3, #0
 8000a98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a9a:	e127      	b.n	8000cec <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	69fa      	ldr	r2, [r7, #28]
 8000aac:	4013      	ands	r3, r2
 8000aae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ab0:	69ba      	ldr	r2, [r7, #24]
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	f040 8116 	bne.w	8000ce6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	2b12      	cmp	r3, #18
 8000ac0:	d034      	beq.n	8000b2c <HAL_GPIO_Init+0xa4>
 8000ac2:	2b12      	cmp	r3, #18
 8000ac4:	d80d      	bhi.n	8000ae2 <HAL_GPIO_Init+0x5a>
 8000ac6:	2b02      	cmp	r3, #2
 8000ac8:	d02b      	beq.n	8000b22 <HAL_GPIO_Init+0x9a>
 8000aca:	2b02      	cmp	r3, #2
 8000acc:	d804      	bhi.n	8000ad8 <HAL_GPIO_Init+0x50>
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d031      	beq.n	8000b36 <HAL_GPIO_Init+0xae>
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d01c      	beq.n	8000b10 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ad6:	e048      	b.n	8000b6a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ad8:	2b03      	cmp	r3, #3
 8000ada:	d043      	beq.n	8000b64 <HAL_GPIO_Init+0xdc>
 8000adc:	2b11      	cmp	r3, #17
 8000ade:	d01b      	beq.n	8000b18 <HAL_GPIO_Init+0x90>
          break;
 8000ae0:	e043      	b.n	8000b6a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ae2:	4a89      	ldr	r2, [pc, #548]	; (8000d08 <HAL_GPIO_Init+0x280>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d026      	beq.n	8000b36 <HAL_GPIO_Init+0xae>
 8000ae8:	4a87      	ldr	r2, [pc, #540]	; (8000d08 <HAL_GPIO_Init+0x280>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d806      	bhi.n	8000afc <HAL_GPIO_Init+0x74>
 8000aee:	4a87      	ldr	r2, [pc, #540]	; (8000d0c <HAL_GPIO_Init+0x284>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d020      	beq.n	8000b36 <HAL_GPIO_Init+0xae>
 8000af4:	4a86      	ldr	r2, [pc, #536]	; (8000d10 <HAL_GPIO_Init+0x288>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d01d      	beq.n	8000b36 <HAL_GPIO_Init+0xae>
          break;
 8000afa:	e036      	b.n	8000b6a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000afc:	4a85      	ldr	r2, [pc, #532]	; (8000d14 <HAL_GPIO_Init+0x28c>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d019      	beq.n	8000b36 <HAL_GPIO_Init+0xae>
 8000b02:	4a85      	ldr	r2, [pc, #532]	; (8000d18 <HAL_GPIO_Init+0x290>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d016      	beq.n	8000b36 <HAL_GPIO_Init+0xae>
 8000b08:	4a84      	ldr	r2, [pc, #528]	; (8000d1c <HAL_GPIO_Init+0x294>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d013      	beq.n	8000b36 <HAL_GPIO_Init+0xae>
          break;
 8000b0e:	e02c      	b.n	8000b6a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	623b      	str	r3, [r7, #32]
          break;
 8000b16:	e028      	b.n	8000b6a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	3304      	adds	r3, #4
 8000b1e:	623b      	str	r3, [r7, #32]
          break;
 8000b20:	e023      	b.n	8000b6a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	68db      	ldr	r3, [r3, #12]
 8000b26:	3308      	adds	r3, #8
 8000b28:	623b      	str	r3, [r7, #32]
          break;
 8000b2a:	e01e      	b.n	8000b6a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	330c      	adds	r3, #12
 8000b32:	623b      	str	r3, [r7, #32]
          break;
 8000b34:	e019      	b.n	8000b6a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d102      	bne.n	8000b44 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b3e:	2304      	movs	r3, #4
 8000b40:	623b      	str	r3, [r7, #32]
          break;
 8000b42:	e012      	b.n	8000b6a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d105      	bne.n	8000b58 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b4c:	2308      	movs	r3, #8
 8000b4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	69fa      	ldr	r2, [r7, #28]
 8000b54:	611a      	str	r2, [r3, #16]
          break;
 8000b56:	e008      	b.n	8000b6a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b58:	2308      	movs	r3, #8
 8000b5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	69fa      	ldr	r2, [r7, #28]
 8000b60:	615a      	str	r2, [r3, #20]
          break;
 8000b62:	e002      	b.n	8000b6a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
          break;
 8000b68:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	2bff      	cmp	r3, #255	; 0xff
 8000b6e:	d801      	bhi.n	8000b74 <HAL_GPIO_Init+0xec>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	e001      	b.n	8000b78 <HAL_GPIO_Init+0xf0>
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	3304      	adds	r3, #4
 8000b78:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	2bff      	cmp	r3, #255	; 0xff
 8000b7e:	d802      	bhi.n	8000b86 <HAL_GPIO_Init+0xfe>
 8000b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	e002      	b.n	8000b8c <HAL_GPIO_Init+0x104>
 8000b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b88:	3b08      	subs	r3, #8
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	210f      	movs	r1, #15
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	401a      	ands	r2, r3
 8000b9e:	6a39      	ldr	r1, [r7, #32]
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba6:	431a      	orrs	r2, r3
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	f000 8096 	beq.w	8000ce6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bba:	4b59      	ldr	r3, [pc, #356]	; (8000d20 <HAL_GPIO_Init+0x298>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	4a58      	ldr	r2, [pc, #352]	; (8000d20 <HAL_GPIO_Init+0x298>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	6193      	str	r3, [r2, #24]
 8000bc6:	4b56      	ldr	r3, [pc, #344]	; (8000d20 <HAL_GPIO_Init+0x298>)
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bd2:	4a54      	ldr	r2, [pc, #336]	; (8000d24 <HAL_GPIO_Init+0x29c>)
 8000bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd6:	089b      	lsrs	r3, r3, #2
 8000bd8:	3302      	adds	r3, #2
 8000bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bde:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be2:	f003 0303 	and.w	r3, r3, #3
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	220f      	movs	r2, #15
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	68fa      	ldr	r2, [r7, #12]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a4b      	ldr	r2, [pc, #300]	; (8000d28 <HAL_GPIO_Init+0x2a0>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d013      	beq.n	8000c26 <HAL_GPIO_Init+0x19e>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a4a      	ldr	r2, [pc, #296]	; (8000d2c <HAL_GPIO_Init+0x2a4>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d00d      	beq.n	8000c22 <HAL_GPIO_Init+0x19a>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a49      	ldr	r2, [pc, #292]	; (8000d30 <HAL_GPIO_Init+0x2a8>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d007      	beq.n	8000c1e <HAL_GPIO_Init+0x196>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a48      	ldr	r2, [pc, #288]	; (8000d34 <HAL_GPIO_Init+0x2ac>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d101      	bne.n	8000c1a <HAL_GPIO_Init+0x192>
 8000c16:	2303      	movs	r3, #3
 8000c18:	e006      	b.n	8000c28 <HAL_GPIO_Init+0x1a0>
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	e004      	b.n	8000c28 <HAL_GPIO_Init+0x1a0>
 8000c1e:	2302      	movs	r3, #2
 8000c20:	e002      	b.n	8000c28 <HAL_GPIO_Init+0x1a0>
 8000c22:	2301      	movs	r3, #1
 8000c24:	e000      	b.n	8000c28 <HAL_GPIO_Init+0x1a0>
 8000c26:	2300      	movs	r3, #0
 8000c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c2a:	f002 0203 	and.w	r2, r2, #3
 8000c2e:	0092      	lsls	r2, r2, #2
 8000c30:	4093      	lsls	r3, r2
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c38:	493a      	ldr	r1, [pc, #232]	; (8000d24 <HAL_GPIO_Init+0x29c>)
 8000c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3c:	089b      	lsrs	r3, r3, #2
 8000c3e:	3302      	adds	r3, #2
 8000c40:	68fa      	ldr	r2, [r7, #12]
 8000c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d006      	beq.n	8000c60 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c52:	4b39      	ldr	r3, [pc, #228]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	4938      	ldr	r1, [pc, #224]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	600b      	str	r3, [r1, #0]
 8000c5e:	e006      	b.n	8000c6e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c60:	4b35      	ldr	r3, [pc, #212]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	43db      	mvns	r3, r3
 8000c68:	4933      	ldr	r1, [pc, #204]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d006      	beq.n	8000c88 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c7a:	4b2f      	ldr	r3, [pc, #188]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000c7c:	685a      	ldr	r2, [r3, #4]
 8000c7e:	492e      	ldr	r1, [pc, #184]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	604b      	str	r3, [r1, #4]
 8000c86:	e006      	b.n	8000c96 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c88:	4b2b      	ldr	r3, [pc, #172]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000c8a:	685a      	ldr	r2, [r3, #4]
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	4929      	ldr	r1, [pc, #164]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000c92:	4013      	ands	r3, r2
 8000c94:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d006      	beq.n	8000cb0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ca2:	4b25      	ldr	r3, [pc, #148]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000ca4:	689a      	ldr	r2, [r3, #8]
 8000ca6:	4924      	ldr	r1, [pc, #144]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	608b      	str	r3, [r1, #8]
 8000cae:	e006      	b.n	8000cbe <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cb0:	4b21      	ldr	r3, [pc, #132]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000cb2:	689a      	ldr	r2, [r3, #8]
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	491f      	ldr	r1, [pc, #124]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000cba:	4013      	ands	r3, r2
 8000cbc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d006      	beq.n	8000cd8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cca:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000ccc:	68da      	ldr	r2, [r3, #12]
 8000cce:	491a      	ldr	r1, [pc, #104]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	60cb      	str	r3, [r1, #12]
 8000cd6:	e006      	b.n	8000ce6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cd8:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000cda:	68da      	ldr	r2, [r3, #12]
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	4915      	ldr	r1, [pc, #84]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce8:	3301      	adds	r3, #1
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f47f aed0 	bne.w	8000a9c <HAL_GPIO_Init+0x14>
  }
}
 8000cfc:	bf00      	nop
 8000cfe:	372c      	adds	r7, #44	; 0x2c
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	10210000 	.word	0x10210000
 8000d0c:	10110000 	.word	0x10110000
 8000d10:	10120000 	.word	0x10120000
 8000d14:	10310000 	.word	0x10310000
 8000d18:	10320000 	.word	0x10320000
 8000d1c:	10220000 	.word	0x10220000
 8000d20:	40021000 	.word	0x40021000
 8000d24:	40010000 	.word	0x40010000
 8000d28:	40010800 	.word	0x40010800
 8000d2c:	40010c00 	.word	0x40010c00
 8000d30:	40011000 	.word	0x40011000
 8000d34:	40011400 	.word	0x40011400
 8000d38:	40010400 	.word	0x40010400

08000d3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	460b      	mov	r3, r1
 8000d46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	689a      	ldr	r2, [r3, #8]
 8000d4c:	887b      	ldrh	r3, [r7, #2]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d002      	beq.n	8000d5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d54:	2301      	movs	r3, #1
 8000d56:	73fb      	strb	r3, [r7, #15]
 8000d58:	e001      	b.n	8000d5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr

08000d6a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	b083      	sub	sp, #12
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
 8000d72:	460b      	mov	r3, r1
 8000d74:	807b      	strh	r3, [r7, #2]
 8000d76:	4613      	mov	r3, r2
 8000d78:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d7a:	787b      	ldrb	r3, [r7, #1]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d003      	beq.n	8000d88 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d80:	887a      	ldrh	r2, [r7, #2]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d86:	e003      	b.n	8000d90 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d88:	887b      	ldrh	r3, [r7, #2]
 8000d8a:	041a      	lsls	r2, r3, #16
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	611a      	str	r2, [r3, #16]
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr

08000d9a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	b085      	sub	sp, #20
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
 8000da2:	460b      	mov	r3, r1
 8000da4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000dac:	887a      	ldrh	r2, [r7, #2]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	4013      	ands	r3, r2
 8000db2:	041a      	lsls	r2, r3, #16
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	43d9      	mvns	r1, r3
 8000db8:	887b      	ldrh	r3, [r7, #2]
 8000dba:	400b      	ands	r3, r1
 8000dbc:	431a      	orrs	r2, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	611a      	str	r2, [r3, #16]
}
 8000dc2:	bf00      	nop
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr

08000dcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d101      	bne.n	8000dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e26c      	b.n	80012b8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f000 8087 	beq.w	8000efa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dec:	4b92      	ldr	r3, [pc, #584]	; (8001038 <HAL_RCC_OscConfig+0x26c>)
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 030c 	and.w	r3, r3, #12
 8000df4:	2b04      	cmp	r3, #4
 8000df6:	d00c      	beq.n	8000e12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000df8:	4b8f      	ldr	r3, [pc, #572]	; (8001038 <HAL_RCC_OscConfig+0x26c>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 030c 	and.w	r3, r3, #12
 8000e00:	2b08      	cmp	r3, #8
 8000e02:	d112      	bne.n	8000e2a <HAL_RCC_OscConfig+0x5e>
 8000e04:	4b8c      	ldr	r3, [pc, #560]	; (8001038 <HAL_RCC_OscConfig+0x26c>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e10:	d10b      	bne.n	8000e2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e12:	4b89      	ldr	r3, [pc, #548]	; (8001038 <HAL_RCC_OscConfig+0x26c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d06c      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x12c>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d168      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e246      	b.n	80012b8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e32:	d106      	bne.n	8000e42 <HAL_RCC_OscConfig+0x76>
 8000e34:	4b80      	ldr	r3, [pc, #512]	; (8001038 <HAL_RCC_OscConfig+0x26c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a7f      	ldr	r2, [pc, #508]	; (8001038 <HAL_RCC_OscConfig+0x26c>)
 8000e3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e3e:	6013      	str	r3, [r2, #0]
 8000e40:	e02e      	b.n	8000ea0 <HAL_RCC_OscConfig+0xd4>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d10c      	bne.n	8000e64 <HAL_RCC_OscConfig+0x98>
 8000e4a:	4b7b      	ldr	r3, [pc, #492]	; (8001038 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a7a      	ldr	r2, [pc, #488]	; (8001038 <HAL_RCC_OscConfig+0x26c>)
 8000e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e54:	6013      	str	r3, [r2, #0]
 8000e56:	4b78      	ldr	r3, [pc, #480]	; (8001038 <HAL_RCC_OscConfig+0x26c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a77      	ldr	r2, [pc, #476]	; (8001038 <HAL_RCC_OscConfig+0x26c>)
 8000e5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e60:	6013      	str	r3, [r2, #0]
 8000e62:	e01d      	b.n	8000ea0 <HAL_RCC_OscConfig+0xd4>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e6c:	d10c      	bne.n	8000e88 <HAL_RCC_OscConfig+0xbc>
 8000e6e:	4b72      	ldr	r3, [pc, #456]	; (8001038 <HAL_RCC_OscConfig+0x26c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a71      	ldr	r2, [pc, #452]	; (8001038 <HAL_RCC_OscConfig+0x26c>)
 8000e74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e78:	6013      	str	r3, [r2, #0]
 8000e7a:	4b6f      	ldr	r3, [pc, #444]	; (8001038 <HAL_RCC_OscConfig+0x26c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a6e      	ldr	r2, [pc, #440]	; (8001038 <HAL_RCC_OscConfig+0x26c>)
 8000e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e84:	6013      	str	r3, [r2, #0]
 8000e86:	e00b      	b.n	8000ea0 <HAL_RCC_OscConfig+0xd4>
 8000e88:	4b6b      	ldr	r3, [pc, #428]	; (8001038 <HAL_RCC_OscConfig+0x26c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a6a      	ldr	r2, [pc, #424]	; (8001038 <HAL_RCC_OscConfig+0x26c>)
 8000e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e92:	6013      	str	r3, [r2, #0]
 8000e94:	4b68      	ldr	r3, [pc, #416]	; (8001038 <HAL_RCC_OscConfig+0x26c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a67      	ldr	r2, [pc, #412]	; (8001038 <HAL_RCC_OscConfig+0x26c>)
 8000e9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d013      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea8:	f7ff fd00 	bl	80008ac <HAL_GetTick>
 8000eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eae:	e008      	b.n	8000ec2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000eb0:	f7ff fcfc 	bl	80008ac <HAL_GetTick>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	2b64      	cmp	r3, #100	; 0x64
 8000ebc:	d901      	bls.n	8000ec2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	e1fa      	b.n	80012b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ec2:	4b5d      	ldr	r3, [pc, #372]	; (8001038 <HAL_RCC_OscConfig+0x26c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d0f0      	beq.n	8000eb0 <HAL_RCC_OscConfig+0xe4>
 8000ece:	e014      	b.n	8000efa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed0:	f7ff fcec 	bl	80008ac <HAL_GetTick>
 8000ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ed6:	e008      	b.n	8000eea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ed8:	f7ff fce8 	bl	80008ac <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	2b64      	cmp	r3, #100	; 0x64
 8000ee4:	d901      	bls.n	8000eea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e1e6      	b.n	80012b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eea:	4b53      	ldr	r3, [pc, #332]	; (8001038 <HAL_RCC_OscConfig+0x26c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d1f0      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x10c>
 8000ef6:	e000      	b.n	8000efa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ef8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d063      	beq.n	8000fce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f06:	4b4c      	ldr	r3, [pc, #304]	; (8001038 <HAL_RCC_OscConfig+0x26c>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f003 030c 	and.w	r3, r3, #12
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d00b      	beq.n	8000f2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f12:	4b49      	ldr	r3, [pc, #292]	; (8001038 <HAL_RCC_OscConfig+0x26c>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f003 030c 	and.w	r3, r3, #12
 8000f1a:	2b08      	cmp	r3, #8
 8000f1c:	d11c      	bne.n	8000f58 <HAL_RCC_OscConfig+0x18c>
 8000f1e:	4b46      	ldr	r3, [pc, #280]	; (8001038 <HAL_RCC_OscConfig+0x26c>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d116      	bne.n	8000f58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f2a:	4b43      	ldr	r3, [pc, #268]	; (8001038 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d005      	beq.n	8000f42 <HAL_RCC_OscConfig+0x176>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	691b      	ldr	r3, [r3, #16]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d001      	beq.n	8000f42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e1ba      	b.n	80012b8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f42:	4b3d      	ldr	r3, [pc, #244]	; (8001038 <HAL_RCC_OscConfig+0x26c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	4939      	ldr	r1, [pc, #228]	; (8001038 <HAL_RCC_OscConfig+0x26c>)
 8000f52:	4313      	orrs	r3, r2
 8000f54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f56:	e03a      	b.n	8000fce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	691b      	ldr	r3, [r3, #16]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d020      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f60:	4b36      	ldr	r3, [pc, #216]	; (800103c <HAL_RCC_OscConfig+0x270>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f66:	f7ff fca1 	bl	80008ac <HAL_GetTick>
 8000f6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f6c:	e008      	b.n	8000f80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f6e:	f7ff fc9d 	bl	80008ac <HAL_GetTick>
 8000f72:	4602      	mov	r2, r0
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d901      	bls.n	8000f80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	e19b      	b.n	80012b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f80:	4b2d      	ldr	r3, [pc, #180]	; (8001038 <HAL_RCC_OscConfig+0x26c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d0f0      	beq.n	8000f6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f8c:	4b2a      	ldr	r3, [pc, #168]	; (8001038 <HAL_RCC_OscConfig+0x26c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	695b      	ldr	r3, [r3, #20]
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	4927      	ldr	r1, [pc, #156]	; (8001038 <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	600b      	str	r3, [r1, #0]
 8000fa0:	e015      	b.n	8000fce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fa2:	4b26      	ldr	r3, [pc, #152]	; (800103c <HAL_RCC_OscConfig+0x270>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa8:	f7ff fc80 	bl	80008ac <HAL_GetTick>
 8000fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fae:	e008      	b.n	8000fc2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fb0:	f7ff fc7c 	bl	80008ac <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d901      	bls.n	8000fc2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e17a      	b.n	80012b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fc2:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d1f0      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0308 	and.w	r3, r3, #8
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d03a      	beq.n	8001050 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	699b      	ldr	r3, [r3, #24]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d019      	beq.n	8001016 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <HAL_RCC_OscConfig+0x274>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe8:	f7ff fc60 	bl	80008ac <HAL_GetTick>
 8000fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fee:	e008      	b.n	8001002 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ff0:	f7ff fc5c 	bl	80008ac <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d901      	bls.n	8001002 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ffe:	2303      	movs	r3, #3
 8001000:	e15a      	b.n	80012b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001002:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <HAL_RCC_OscConfig+0x26c>)
 8001004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	2b00      	cmp	r3, #0
 800100c:	d0f0      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800100e:	2001      	movs	r0, #1
 8001010:	f000 fada 	bl	80015c8 <RCC_Delay>
 8001014:	e01c      	b.n	8001050 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <HAL_RCC_OscConfig+0x274>)
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800101c:	f7ff fc46 	bl	80008ac <HAL_GetTick>
 8001020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001022:	e00f      	b.n	8001044 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001024:	f7ff fc42 	bl	80008ac <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b02      	cmp	r3, #2
 8001030:	d908      	bls.n	8001044 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e140      	b.n	80012b8 <HAL_RCC_OscConfig+0x4ec>
 8001036:	bf00      	nop
 8001038:	40021000 	.word	0x40021000
 800103c:	42420000 	.word	0x42420000
 8001040:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001044:	4b9e      	ldr	r3, [pc, #632]	; (80012c0 <HAL_RCC_OscConfig+0x4f4>)
 8001046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001048:	f003 0302 	and.w	r3, r3, #2
 800104c:	2b00      	cmp	r3, #0
 800104e:	d1e9      	bne.n	8001024 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0304 	and.w	r3, r3, #4
 8001058:	2b00      	cmp	r3, #0
 800105a:	f000 80a6 	beq.w	80011aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800105e:	2300      	movs	r3, #0
 8001060:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001062:	4b97      	ldr	r3, [pc, #604]	; (80012c0 <HAL_RCC_OscConfig+0x4f4>)
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d10d      	bne.n	800108a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800106e:	4b94      	ldr	r3, [pc, #592]	; (80012c0 <HAL_RCC_OscConfig+0x4f4>)
 8001070:	69db      	ldr	r3, [r3, #28]
 8001072:	4a93      	ldr	r2, [pc, #588]	; (80012c0 <HAL_RCC_OscConfig+0x4f4>)
 8001074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001078:	61d3      	str	r3, [r2, #28]
 800107a:	4b91      	ldr	r3, [pc, #580]	; (80012c0 <HAL_RCC_OscConfig+0x4f4>)
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001086:	2301      	movs	r3, #1
 8001088:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800108a:	4b8e      	ldr	r3, [pc, #568]	; (80012c4 <HAL_RCC_OscConfig+0x4f8>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001092:	2b00      	cmp	r3, #0
 8001094:	d118      	bne.n	80010c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001096:	4b8b      	ldr	r3, [pc, #556]	; (80012c4 <HAL_RCC_OscConfig+0x4f8>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a8a      	ldr	r2, [pc, #552]	; (80012c4 <HAL_RCC_OscConfig+0x4f8>)
 800109c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010a2:	f7ff fc03 	bl	80008ac <HAL_GetTick>
 80010a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a8:	e008      	b.n	80010bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010aa:	f7ff fbff 	bl	80008ac <HAL_GetTick>
 80010ae:	4602      	mov	r2, r0
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b64      	cmp	r3, #100	; 0x64
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e0fd      	b.n	80012b8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010bc:	4b81      	ldr	r3, [pc, #516]	; (80012c4 <HAL_RCC_OscConfig+0x4f8>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d0f0      	beq.n	80010aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d106      	bne.n	80010de <HAL_RCC_OscConfig+0x312>
 80010d0:	4b7b      	ldr	r3, [pc, #492]	; (80012c0 <HAL_RCC_OscConfig+0x4f4>)
 80010d2:	6a1b      	ldr	r3, [r3, #32]
 80010d4:	4a7a      	ldr	r2, [pc, #488]	; (80012c0 <HAL_RCC_OscConfig+0x4f4>)
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	6213      	str	r3, [r2, #32]
 80010dc:	e02d      	b.n	800113a <HAL_RCC_OscConfig+0x36e>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d10c      	bne.n	8001100 <HAL_RCC_OscConfig+0x334>
 80010e6:	4b76      	ldr	r3, [pc, #472]	; (80012c0 <HAL_RCC_OscConfig+0x4f4>)
 80010e8:	6a1b      	ldr	r3, [r3, #32]
 80010ea:	4a75      	ldr	r2, [pc, #468]	; (80012c0 <HAL_RCC_OscConfig+0x4f4>)
 80010ec:	f023 0301 	bic.w	r3, r3, #1
 80010f0:	6213      	str	r3, [r2, #32]
 80010f2:	4b73      	ldr	r3, [pc, #460]	; (80012c0 <HAL_RCC_OscConfig+0x4f4>)
 80010f4:	6a1b      	ldr	r3, [r3, #32]
 80010f6:	4a72      	ldr	r2, [pc, #456]	; (80012c0 <HAL_RCC_OscConfig+0x4f4>)
 80010f8:	f023 0304 	bic.w	r3, r3, #4
 80010fc:	6213      	str	r3, [r2, #32]
 80010fe:	e01c      	b.n	800113a <HAL_RCC_OscConfig+0x36e>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	2b05      	cmp	r3, #5
 8001106:	d10c      	bne.n	8001122 <HAL_RCC_OscConfig+0x356>
 8001108:	4b6d      	ldr	r3, [pc, #436]	; (80012c0 <HAL_RCC_OscConfig+0x4f4>)
 800110a:	6a1b      	ldr	r3, [r3, #32]
 800110c:	4a6c      	ldr	r2, [pc, #432]	; (80012c0 <HAL_RCC_OscConfig+0x4f4>)
 800110e:	f043 0304 	orr.w	r3, r3, #4
 8001112:	6213      	str	r3, [r2, #32]
 8001114:	4b6a      	ldr	r3, [pc, #424]	; (80012c0 <HAL_RCC_OscConfig+0x4f4>)
 8001116:	6a1b      	ldr	r3, [r3, #32]
 8001118:	4a69      	ldr	r2, [pc, #420]	; (80012c0 <HAL_RCC_OscConfig+0x4f4>)
 800111a:	f043 0301 	orr.w	r3, r3, #1
 800111e:	6213      	str	r3, [r2, #32]
 8001120:	e00b      	b.n	800113a <HAL_RCC_OscConfig+0x36e>
 8001122:	4b67      	ldr	r3, [pc, #412]	; (80012c0 <HAL_RCC_OscConfig+0x4f4>)
 8001124:	6a1b      	ldr	r3, [r3, #32]
 8001126:	4a66      	ldr	r2, [pc, #408]	; (80012c0 <HAL_RCC_OscConfig+0x4f4>)
 8001128:	f023 0301 	bic.w	r3, r3, #1
 800112c:	6213      	str	r3, [r2, #32]
 800112e:	4b64      	ldr	r3, [pc, #400]	; (80012c0 <HAL_RCC_OscConfig+0x4f4>)
 8001130:	6a1b      	ldr	r3, [r3, #32]
 8001132:	4a63      	ldr	r2, [pc, #396]	; (80012c0 <HAL_RCC_OscConfig+0x4f4>)
 8001134:	f023 0304 	bic.w	r3, r3, #4
 8001138:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d015      	beq.n	800116e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001142:	f7ff fbb3 	bl	80008ac <HAL_GetTick>
 8001146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001148:	e00a      	b.n	8001160 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800114a:	f7ff fbaf 	bl	80008ac <HAL_GetTick>
 800114e:	4602      	mov	r2, r0
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	f241 3288 	movw	r2, #5000	; 0x1388
 8001158:	4293      	cmp	r3, r2
 800115a:	d901      	bls.n	8001160 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e0ab      	b.n	80012b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001160:	4b57      	ldr	r3, [pc, #348]	; (80012c0 <HAL_RCC_OscConfig+0x4f4>)
 8001162:	6a1b      	ldr	r3, [r3, #32]
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0ee      	beq.n	800114a <HAL_RCC_OscConfig+0x37e>
 800116c:	e014      	b.n	8001198 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800116e:	f7ff fb9d 	bl	80008ac <HAL_GetTick>
 8001172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001174:	e00a      	b.n	800118c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001176:	f7ff fb99 	bl	80008ac <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	f241 3288 	movw	r2, #5000	; 0x1388
 8001184:	4293      	cmp	r3, r2
 8001186:	d901      	bls.n	800118c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e095      	b.n	80012b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800118c:	4b4c      	ldr	r3, [pc, #304]	; (80012c0 <HAL_RCC_OscConfig+0x4f4>)
 800118e:	6a1b      	ldr	r3, [r3, #32]
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1ee      	bne.n	8001176 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001198:	7dfb      	ldrb	r3, [r7, #23]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d105      	bne.n	80011aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800119e:	4b48      	ldr	r3, [pc, #288]	; (80012c0 <HAL_RCC_OscConfig+0x4f4>)
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	4a47      	ldr	r2, [pc, #284]	; (80012c0 <HAL_RCC_OscConfig+0x4f4>)
 80011a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 8081 	beq.w	80012b6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011b4:	4b42      	ldr	r3, [pc, #264]	; (80012c0 <HAL_RCC_OscConfig+0x4f4>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 030c 	and.w	r3, r3, #12
 80011bc:	2b08      	cmp	r3, #8
 80011be:	d061      	beq.n	8001284 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	69db      	ldr	r3, [r3, #28]
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d146      	bne.n	8001256 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011c8:	4b3f      	ldr	r3, [pc, #252]	; (80012c8 <HAL_RCC_OscConfig+0x4fc>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ce:	f7ff fb6d 	bl	80008ac <HAL_GetTick>
 80011d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011d4:	e008      	b.n	80011e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011d6:	f7ff fb69 	bl	80008ac <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d901      	bls.n	80011e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e067      	b.n	80012b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011e8:	4b35      	ldr	r3, [pc, #212]	; (80012c0 <HAL_RCC_OscConfig+0x4f4>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1f0      	bne.n	80011d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a1b      	ldr	r3, [r3, #32]
 80011f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011fc:	d108      	bne.n	8001210 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011fe:	4b30      	ldr	r3, [pc, #192]	; (80012c0 <HAL_RCC_OscConfig+0x4f4>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	492d      	ldr	r1, [pc, #180]	; (80012c0 <HAL_RCC_OscConfig+0x4f4>)
 800120c:	4313      	orrs	r3, r2
 800120e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001210:	4b2b      	ldr	r3, [pc, #172]	; (80012c0 <HAL_RCC_OscConfig+0x4f4>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a19      	ldr	r1, [r3, #32]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001220:	430b      	orrs	r3, r1
 8001222:	4927      	ldr	r1, [pc, #156]	; (80012c0 <HAL_RCC_OscConfig+0x4f4>)
 8001224:	4313      	orrs	r3, r2
 8001226:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001228:	4b27      	ldr	r3, [pc, #156]	; (80012c8 <HAL_RCC_OscConfig+0x4fc>)
 800122a:	2201      	movs	r2, #1
 800122c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122e:	f7ff fb3d 	bl	80008ac <HAL_GetTick>
 8001232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001234:	e008      	b.n	8001248 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001236:	f7ff fb39 	bl	80008ac <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b02      	cmp	r3, #2
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e037      	b.n	80012b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001248:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <HAL_RCC_OscConfig+0x4f4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d0f0      	beq.n	8001236 <HAL_RCC_OscConfig+0x46a>
 8001254:	e02f      	b.n	80012b6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001256:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <HAL_RCC_OscConfig+0x4fc>)
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800125c:	f7ff fb26 	bl	80008ac <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001264:	f7ff fb22 	bl	80008ac <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e020      	b.n	80012b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001276:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_RCC_OscConfig+0x4f4>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1f0      	bne.n	8001264 <HAL_RCC_OscConfig+0x498>
 8001282:	e018      	b.n	80012b6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	69db      	ldr	r3, [r3, #28]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d101      	bne.n	8001290 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e013      	b.n	80012b8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <HAL_RCC_OscConfig+0x4f4>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a1b      	ldr	r3, [r3, #32]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d106      	bne.n	80012b2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d001      	beq.n	80012b6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e000      	b.n	80012b8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40007000 	.word	0x40007000
 80012c8:	42420060 	.word	0x42420060

080012cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d101      	bne.n	80012e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e0d0      	b.n	8001482 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012e0:	4b6a      	ldr	r3, [pc, #424]	; (800148c <HAL_RCC_ClockConfig+0x1c0>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0307 	and.w	r3, r3, #7
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d910      	bls.n	8001310 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ee:	4b67      	ldr	r3, [pc, #412]	; (800148c <HAL_RCC_ClockConfig+0x1c0>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f023 0207 	bic.w	r2, r3, #7
 80012f6:	4965      	ldr	r1, [pc, #404]	; (800148c <HAL_RCC_ClockConfig+0x1c0>)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012fe:	4b63      	ldr	r3, [pc, #396]	; (800148c <HAL_RCC_ClockConfig+0x1c0>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	429a      	cmp	r2, r3
 800130a:	d001      	beq.n	8001310 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e0b8      	b.n	8001482 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d020      	beq.n	800135e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	2b00      	cmp	r3, #0
 8001326:	d005      	beq.n	8001334 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001328:	4b59      	ldr	r3, [pc, #356]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	4a58      	ldr	r2, [pc, #352]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 800132e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001332:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0308 	and.w	r3, r3, #8
 800133c:	2b00      	cmp	r3, #0
 800133e:	d005      	beq.n	800134c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001340:	4b53      	ldr	r3, [pc, #332]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	4a52      	ldr	r2, [pc, #328]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 8001346:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800134a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800134c:	4b50      	ldr	r3, [pc, #320]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	494d      	ldr	r1, [pc, #308]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 800135a:	4313      	orrs	r3, r2
 800135c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	2b00      	cmp	r3, #0
 8001368:	d040      	beq.n	80013ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d107      	bne.n	8001382 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001372:	4b47      	ldr	r3, [pc, #284]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d115      	bne.n	80013aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e07f      	b.n	8001482 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	2b02      	cmp	r3, #2
 8001388:	d107      	bne.n	800139a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800138a:	4b41      	ldr	r3, [pc, #260]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d109      	bne.n	80013aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e073      	b.n	8001482 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800139a:	4b3d      	ldr	r3, [pc, #244]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e06b      	b.n	8001482 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013aa:	4b39      	ldr	r3, [pc, #228]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f023 0203 	bic.w	r2, r3, #3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	4936      	ldr	r1, [pc, #216]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 80013b8:	4313      	orrs	r3, r2
 80013ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013bc:	f7ff fa76 	bl	80008ac <HAL_GetTick>
 80013c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013c2:	e00a      	b.n	80013da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013c4:	f7ff fa72 	bl	80008ac <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e053      	b.n	8001482 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013da:	4b2d      	ldr	r3, [pc, #180]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 020c 	and.w	r2, r3, #12
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d1eb      	bne.n	80013c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013ec:	4b27      	ldr	r3, [pc, #156]	; (800148c <HAL_RCC_ClockConfig+0x1c0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d210      	bcs.n	800141c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013fa:	4b24      	ldr	r3, [pc, #144]	; (800148c <HAL_RCC_ClockConfig+0x1c0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f023 0207 	bic.w	r2, r3, #7
 8001402:	4922      	ldr	r1, [pc, #136]	; (800148c <HAL_RCC_ClockConfig+0x1c0>)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	4313      	orrs	r3, r2
 8001408:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800140a:	4b20      	ldr	r3, [pc, #128]	; (800148c <HAL_RCC_ClockConfig+0x1c0>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	683a      	ldr	r2, [r7, #0]
 8001414:	429a      	cmp	r2, r3
 8001416:	d001      	beq.n	800141c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e032      	b.n	8001482 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	2b00      	cmp	r3, #0
 8001426:	d008      	beq.n	800143a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001428:	4b19      	ldr	r3, [pc, #100]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	4916      	ldr	r1, [pc, #88]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 8001436:	4313      	orrs	r3, r2
 8001438:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	2b00      	cmp	r3, #0
 8001444:	d009      	beq.n	800145a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001446:	4b12      	ldr	r3, [pc, #72]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	490e      	ldr	r1, [pc, #56]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 8001456:	4313      	orrs	r3, r2
 8001458:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800145a:	f000 f821 	bl	80014a0 <HAL_RCC_GetSysClockFreq>
 800145e:	4601      	mov	r1, r0
 8001460:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	091b      	lsrs	r3, r3, #4
 8001466:	f003 030f 	and.w	r3, r3, #15
 800146a:	4a0a      	ldr	r2, [pc, #40]	; (8001494 <HAL_RCC_ClockConfig+0x1c8>)
 800146c:	5cd3      	ldrb	r3, [r2, r3]
 800146e:	fa21 f303 	lsr.w	r3, r1, r3
 8001472:	4a09      	ldr	r2, [pc, #36]	; (8001498 <HAL_RCC_ClockConfig+0x1cc>)
 8001474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001476:	4b09      	ldr	r3, [pc, #36]	; (800149c <HAL_RCC_ClockConfig+0x1d0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f9d4 	bl	8000828 <HAL_InitTick>

  return HAL_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40022000 	.word	0x40022000
 8001490:	40021000 	.word	0x40021000
 8001494:	08003a60 	.word	0x08003a60
 8001498:	20000000 	.word	0x20000000
 800149c:	20000004 	.word	0x20000004

080014a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014a0:	b490      	push	{r4, r7}
 80014a2:	b08a      	sub	sp, #40	; 0x28
 80014a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80014a6:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <HAL_RCC_GetSysClockFreq+0xb0>)
 80014a8:	1d3c      	adds	r4, r7, #4
 80014aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80014b0:	4b28      	ldr	r3, [pc, #160]	; (8001554 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
 80014ba:	2300      	movs	r3, #0
 80014bc:	61bb      	str	r3, [r7, #24]
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014ca:	4b23      	ldr	r3, [pc, #140]	; (8001558 <HAL_RCC_GetSysClockFreq+0xb8>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	f003 030c 	and.w	r3, r3, #12
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	d002      	beq.n	80014e0 <HAL_RCC_GetSysClockFreq+0x40>
 80014da:	2b08      	cmp	r3, #8
 80014dc:	d003      	beq.n	80014e6 <HAL_RCC_GetSysClockFreq+0x46>
 80014de:	e02d      	b.n	800153c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014e0:	4b1e      	ldr	r3, [pc, #120]	; (800155c <HAL_RCC_GetSysClockFreq+0xbc>)
 80014e2:	623b      	str	r3, [r7, #32]
      break;
 80014e4:	e02d      	b.n	8001542 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	0c9b      	lsrs	r3, r3, #18
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014f2:	4413      	add	r3, r2
 80014f4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80014f8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d013      	beq.n	800152c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001504:	4b14      	ldr	r3, [pc, #80]	; (8001558 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	0c5b      	lsrs	r3, r3, #17
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001512:	4413      	add	r3, r2
 8001514:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001518:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	4a0f      	ldr	r2, [pc, #60]	; (800155c <HAL_RCC_GetSysClockFreq+0xbc>)
 800151e:	fb02 f203 	mul.w	r2, r2, r3
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	fbb2 f3f3 	udiv	r3, r2, r3
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
 800152a:	e004      	b.n	8001536 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	4a0c      	ldr	r2, [pc, #48]	; (8001560 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001530:	fb02 f303 	mul.w	r3, r2, r3
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	623b      	str	r3, [r7, #32]
      break;
 800153a:	e002      	b.n	8001542 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800153c:	4b07      	ldr	r3, [pc, #28]	; (800155c <HAL_RCC_GetSysClockFreq+0xbc>)
 800153e:	623b      	str	r3, [r7, #32]
      break;
 8001540:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001542:	6a3b      	ldr	r3, [r7, #32]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3728      	adds	r7, #40	; 0x28
 8001548:	46bd      	mov	sp, r7
 800154a:	bc90      	pop	{r4, r7}
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	08003a44 	.word	0x08003a44
 8001554:	08003a54 	.word	0x08003a54
 8001558:	40021000 	.word	0x40021000
 800155c:	007a1200 	.word	0x007a1200
 8001560:	003d0900 	.word	0x003d0900

08001564 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001568:	4b02      	ldr	r3, [pc, #8]	; (8001574 <HAL_RCC_GetHCLKFreq+0x10>)
 800156a:	681b      	ldr	r3, [r3, #0]
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr
 8001574:	20000000 	.word	0x20000000

08001578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800157c:	f7ff fff2 	bl	8001564 <HAL_RCC_GetHCLKFreq>
 8001580:	4601      	mov	r1, r0
 8001582:	4b05      	ldr	r3, [pc, #20]	; (8001598 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	0a1b      	lsrs	r3, r3, #8
 8001588:	f003 0307 	and.w	r3, r3, #7
 800158c:	4a03      	ldr	r2, [pc, #12]	; (800159c <HAL_RCC_GetPCLK1Freq+0x24>)
 800158e:	5cd3      	ldrb	r3, [r2, r3]
 8001590:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001594:	4618      	mov	r0, r3
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40021000 	.word	0x40021000
 800159c:	08003a70 	.word	0x08003a70

080015a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015a4:	f7ff ffde 	bl	8001564 <HAL_RCC_GetHCLKFreq>
 80015a8:	4601      	mov	r1, r0
 80015aa:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	0adb      	lsrs	r3, r3, #11
 80015b0:	f003 0307 	and.w	r3, r3, #7
 80015b4:	4a03      	ldr	r2, [pc, #12]	; (80015c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015b6:	5cd3      	ldrb	r3, [r2, r3]
 80015b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80015bc:	4618      	mov	r0, r3
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40021000 	.word	0x40021000
 80015c4:	08003a70 	.word	0x08003a70

080015c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015d0:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <RCC_Delay+0x34>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <RCC_Delay+0x38>)
 80015d6:	fba2 2303 	umull	r2, r3, r2, r3
 80015da:	0a5b      	lsrs	r3, r3, #9
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	fb02 f303 	mul.w	r3, r2, r3
 80015e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015e4:	bf00      	nop
  }
  while (Delay --);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	1e5a      	subs	r2, r3, #1
 80015ea:	60fa      	str	r2, [r7, #12]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1f9      	bne.n	80015e4 <RCC_Delay+0x1c>
}
 80015f0:	bf00      	nop
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	20000000 	.word	0x20000000
 8001600:	10624dd3 	.word	0x10624dd3

08001604 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e03f      	b.n	8001696 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d106      	bne.n	8001630 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff f84c 	bl	80006c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2224      	movs	r2, #36	; 0x24
 8001634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68da      	ldr	r2, [r3, #12]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001646:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 f915 	bl	8001878 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	691a      	ldr	r2, [r3, #16]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800165c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	695a      	ldr	r2, [r3, #20]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800166c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	68da      	ldr	r2, [r3, #12]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800167c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2220      	movs	r2, #32
 8001688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2220      	movs	r2, #32
 8001690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b08a      	sub	sp, #40	; 0x28
 80016a2:	af02      	add	r7, sp, #8
 80016a4:	60f8      	str	r0, [r7, #12]
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	603b      	str	r3, [r7, #0]
 80016aa:	4613      	mov	r3, r2
 80016ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b20      	cmp	r3, #32
 80016bc:	f040 808c 	bne.w	80017d8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d002      	beq.n	80016cc <HAL_UART_Receive+0x2e>
 80016c6:	88fb      	ldrh	r3, [r7, #6]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e084      	b.n	80017da <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d101      	bne.n	80016de <HAL_UART_Receive+0x40>
 80016da:	2302      	movs	r3, #2
 80016dc:	e07d      	b.n	80017da <HAL_UART_Receive+0x13c>
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2201      	movs	r2, #1
 80016e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2200      	movs	r2, #0
 80016ea:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2222      	movs	r2, #34	; 0x22
 80016f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2200      	movs	r2, #0
 80016f8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80016fa:	f7ff f8d7 	bl	80008ac <HAL_GetTick>
 80016fe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	88fa      	ldrh	r2, [r7, #6]
 8001704:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	88fa      	ldrh	r2, [r7, #6]
 800170a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001714:	d108      	bne.n	8001728 <HAL_UART_Receive+0x8a>
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d104      	bne.n	8001728 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	61bb      	str	r3, [r7, #24]
 8001726:	e003      	b.n	8001730 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800172c:	2300      	movs	r3, #0
 800172e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001738:	e043      	b.n	80017c2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	2200      	movs	r2, #0
 8001742:	2120      	movs	r1, #32
 8001744:	68f8      	ldr	r0, [r7, #12]
 8001746:	f000 f84c 	bl	80017e2 <UART_WaitOnFlagUntilTimeout>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e042      	b.n	80017da <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d10c      	bne.n	8001774 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	b29b      	uxth	r3, r3
 8001762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001766:	b29a      	uxth	r2, r3
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	3302      	adds	r3, #2
 8001770:	61bb      	str	r3, [r7, #24]
 8001772:	e01f      	b.n	80017b4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800177c:	d007      	beq.n	800178e <HAL_UART_Receive+0xf0>
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10a      	bne.n	800179c <HAL_UART_Receive+0xfe>
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d106      	bne.n	800179c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	b2da      	uxtb	r2, r3
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	701a      	strb	r2, [r3, #0]
 800179a:	e008      	b.n	80017ae <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3301      	adds	r3, #1
 80017b2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	3b01      	subs	r3, #1
 80017bc:	b29a      	uxth	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d1b6      	bne.n	800173a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2220      	movs	r2, #32
 80017d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80017d4:	2300      	movs	r3, #0
 80017d6:	e000      	b.n	80017da <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80017d8:	2302      	movs	r3, #2
  }
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3720      	adds	r7, #32
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b084      	sub	sp, #16
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	60f8      	str	r0, [r7, #12]
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	603b      	str	r3, [r7, #0]
 80017ee:	4613      	mov	r3, r2
 80017f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80017f2:	e02c      	b.n	800184e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017fa:	d028      	beq.n	800184e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d007      	beq.n	8001812 <UART_WaitOnFlagUntilTimeout+0x30>
 8001802:	f7ff f853 	bl	80008ac <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	429a      	cmp	r2, r3
 8001810:	d21d      	bcs.n	800184e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001820:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	695a      	ldr	r2, [r3, #20]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 0201 	bic.w	r2, r2, #1
 8001830:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2220      	movs	r2, #32
 8001836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2220      	movs	r2, #32
 800183e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e00f      	b.n	800186e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	4013      	ands	r3, r2
 8001858:	68ba      	ldr	r2, [r7, #8]
 800185a:	429a      	cmp	r2, r3
 800185c:	bf0c      	ite	eq
 800185e:	2301      	moveq	r3, #1
 8001860:	2300      	movne	r3, #0
 8001862:	b2db      	uxtb	r3, r3
 8001864:	461a      	mov	r2, r3
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	429a      	cmp	r2, r3
 800186a:	d0c3      	beq.n	80017f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80018b2:	f023 030c 	bic.w	r3, r3, #12
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	6812      	ldr	r2, [r2, #0]
 80018ba:	68b9      	ldr	r1, [r7, #8]
 80018bc:	430b      	orrs	r3, r1
 80018be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	699a      	ldr	r2, [r3, #24]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a2c      	ldr	r2, [pc, #176]	; (800198c <UART_SetConfig+0x114>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d103      	bne.n	80018e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80018e0:	f7ff fe5e 	bl	80015a0 <HAL_RCC_GetPCLK2Freq>
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	e002      	b.n	80018ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80018e8:	f7ff fe46 	bl	8001578 <HAL_RCC_GetPCLK1Freq>
 80018ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	4613      	mov	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4413      	add	r3, r2
 80018f6:	009a      	lsls	r2, r3, #2
 80018f8:	441a      	add	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	fbb2 f3f3 	udiv	r3, r2, r3
 8001904:	4a22      	ldr	r2, [pc, #136]	; (8001990 <UART_SetConfig+0x118>)
 8001906:	fba2 2303 	umull	r2, r3, r2, r3
 800190a:	095b      	lsrs	r3, r3, #5
 800190c:	0119      	lsls	r1, r3, #4
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	4613      	mov	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	009a      	lsls	r2, r3, #2
 8001918:	441a      	add	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	fbb2 f2f3 	udiv	r2, r2, r3
 8001924:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <UART_SetConfig+0x118>)
 8001926:	fba3 0302 	umull	r0, r3, r3, r2
 800192a:	095b      	lsrs	r3, r3, #5
 800192c:	2064      	movs	r0, #100	; 0x64
 800192e:	fb00 f303 	mul.w	r3, r0, r3
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	011b      	lsls	r3, r3, #4
 8001936:	3332      	adds	r3, #50	; 0x32
 8001938:	4a15      	ldr	r2, [pc, #84]	; (8001990 <UART_SetConfig+0x118>)
 800193a:	fba2 2303 	umull	r2, r3, r2, r3
 800193e:	095b      	lsrs	r3, r3, #5
 8001940:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001944:	4419      	add	r1, r3
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	4613      	mov	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	009a      	lsls	r2, r3, #2
 8001950:	441a      	add	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	fbb2 f2f3 	udiv	r2, r2, r3
 800195c:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <UART_SetConfig+0x118>)
 800195e:	fba3 0302 	umull	r0, r3, r3, r2
 8001962:	095b      	lsrs	r3, r3, #5
 8001964:	2064      	movs	r0, #100	; 0x64
 8001966:	fb00 f303 	mul.w	r3, r0, r3
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	011b      	lsls	r3, r3, #4
 800196e:	3332      	adds	r3, #50	; 0x32
 8001970:	4a07      	ldr	r2, [pc, #28]	; (8001990 <UART_SetConfig+0x118>)
 8001972:	fba2 2303 	umull	r2, r3, r2, r3
 8001976:	095b      	lsrs	r3, r3, #5
 8001978:	f003 020f 	and.w	r2, r3, #15
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	440a      	add	r2, r1
 8001982:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001984:	bf00      	nop
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40013800 	.word	0x40013800
 8001990:	51eb851f 	.word	0x51eb851f

08001994 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80019a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019a6:	2b84      	cmp	r3, #132	; 0x84
 80019a8:	d005      	beq.n	80019b6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80019aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4413      	add	r3, r2
 80019b2:	3303      	adds	r3, #3
 80019b4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80019b6:	68fb      	ldr	r3, [r7, #12]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr

080019c2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80019c6:	f000 ff11 	bl	80027ec <vTaskStartScheduler>
  
  return osOK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80019d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019d2:	b089      	sub	sp, #36	; 0x24
 80019d4:	af04      	add	r7, sp, #16
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d020      	beq.n	8001a24 <osThreadCreate+0x54>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d01c      	beq.n	8001a24 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685c      	ldr	r4, [r3, #4]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681d      	ldr	r5, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	691e      	ldr	r6, [r3, #16]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ffc9 	bl	8001994 <makeFreeRtosPriority>
 8001a02:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a0c:	9202      	str	r2, [sp, #8]
 8001a0e:	9301      	str	r3, [sp, #4]
 8001a10:	9100      	str	r1, [sp, #0]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	4632      	mov	r2, r6
 8001a16:	4629      	mov	r1, r5
 8001a18:	4620      	mov	r0, r4
 8001a1a:	f000 fd2d 	bl	8002478 <xTaskCreateStatic>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	e01c      	b.n	8001a5e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685c      	ldr	r4, [r3, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a30:	b29e      	uxth	r6, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff ffab 	bl	8001994 <makeFreeRtosPriority>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	f107 030c 	add.w	r3, r7, #12
 8001a44:	9301      	str	r3, [sp, #4]
 8001a46:	9200      	str	r2, [sp, #0]
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	4632      	mov	r2, r6
 8001a4c:	4629      	mov	r1, r5
 8001a4e:	4620      	mov	r0, r4
 8001a50:	f000 fd6b 	bl	800252a <xTaskCreate>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d001      	beq.n	8001a5e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e000      	b.n	8001a60 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a68 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <osDelay+0x16>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	e000      	b.n	8001a80 <osDelay+0x18>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	4618      	mov	r0, r3
 8001a82:	f000 fe7f 	bl	8002784 <vTaskDelay>
  
  return osOK;
 8001a86:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8001a90:	b590      	push	{r4, r7, lr}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af02      	add	r7, sp, #8
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d012      	beq.n	8001ac8 <osMessageCreate+0x38>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00e      	beq.n	8001ac8 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6818      	ldr	r0, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6859      	ldr	r1, [r3, #4]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68dc      	ldr	r4, [r3, #12]
 8001aba:	2300      	movs	r3, #0
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	4623      	mov	r3, r4
 8001ac0:	f000 f926 	bl	8001d10 <xQueueGenericCreateStatic>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	e008      	b.n	8001ada <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6818      	ldr	r0, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f000 f98e 	bl	8001df4 <xQueueGenericCreate>
 8001ad8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd90      	pop	{r4, r7, pc}

08001ae2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f103 0208 	add.w	r2, r3, #8
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f04f 32ff 	mov.w	r2, #4294967295
 8001afa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f103 0208 	add.w	r2, r3, #8
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f103 0208 	add.w	r2, r3, #8
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr

08001b20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr

08001b38 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	601a      	str	r2, [r3, #0]
}
 8001b74:	bf00      	nop
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr

08001b7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b085      	sub	sp, #20
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b94:	d103      	bne.n	8001b9e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	e00c      	b.n	8001bb8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3308      	adds	r3, #8
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	e002      	b.n	8001bac <vListInsert+0x2e>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d2f6      	bcs.n	8001ba6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	1c5a      	adds	r2, r3, #1
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	601a      	str	r2, [r3, #0]
}
 8001be4:	bf00      	nop
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr

08001bee <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b085      	sub	sp, #20
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6892      	ldr	r2, [r2, #8]
 8001c04:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6852      	ldr	r2, [r2, #4]
 8001c0e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d103      	bne.n	8001c22 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	1e5a      	subs	r2, r3, #1
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d109      	bne.n	8001c68 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c58:	f383 8811 	msr	BASEPRI, r3
 8001c5c:	f3bf 8f6f 	isb	sy
 8001c60:	f3bf 8f4f 	dsb	sy
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	e7fe      	b.n	8001c66 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8001c68:	f001 fbae 	bl	80033c8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c74:	68f9      	ldr	r1, [r7, #12]
 8001c76:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001c78:	fb01 f303 	mul.w	r3, r1, r3
 8001c7c:	441a      	add	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	68f9      	ldr	r1, [r7, #12]
 8001c9c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001c9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ca2:	441a      	add	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	22ff      	movs	r2, #255	; 0xff
 8001cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	22ff      	movs	r2, #255	; 0xff
 8001cb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d114      	bne.n	8001ce8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d01a      	beq.n	8001cfc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	3310      	adds	r3, #16
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 ffd0 	bl	8002c70 <xTaskRemoveFromEventList>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d012      	beq.n	8001cfc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001cd6:	4b0d      	ldr	r3, [pc, #52]	; (8001d0c <xQueueGenericReset+0xcc>)
 8001cd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	f3bf 8f4f 	dsb	sy
 8001ce2:	f3bf 8f6f 	isb	sy
 8001ce6:	e009      	b.n	8001cfc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	3310      	adds	r3, #16
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff fef8 	bl	8001ae2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	3324      	adds	r3, #36	; 0x24
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff fef3 	bl	8001ae2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001cfc:	f001 fb92 	bl	8003424 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001d00:	2301      	movs	r3, #1
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	e000ed04 	.word	0xe000ed04

08001d10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08e      	sub	sp, #56	; 0x38
 8001d14:	af02      	add	r7, sp, #8
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d109      	bne.n	8001d38 <xQueueGenericCreateStatic+0x28>
 8001d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d28:	f383 8811 	msr	BASEPRI, r3
 8001d2c:	f3bf 8f6f 	isb	sy
 8001d30:	f3bf 8f4f 	dsb	sy
 8001d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d36:	e7fe      	b.n	8001d36 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d109      	bne.n	8001d52 <xQueueGenericCreateStatic+0x42>
 8001d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d42:	f383 8811 	msr	BASEPRI, r3
 8001d46:	f3bf 8f6f 	isb	sy
 8001d4a:	f3bf 8f4f 	dsb	sy
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d50:	e7fe      	b.n	8001d50 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d002      	beq.n	8001d5e <xQueueGenericCreateStatic+0x4e>
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <xQueueGenericCreateStatic+0x52>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <xQueueGenericCreateStatic+0x54>
 8001d62:	2300      	movs	r3, #0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d109      	bne.n	8001d7c <xQueueGenericCreateStatic+0x6c>
 8001d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d6c:	f383 8811 	msr	BASEPRI, r3
 8001d70:	f3bf 8f6f 	isb	sy
 8001d74:	f3bf 8f4f 	dsb	sy
 8001d78:	623b      	str	r3, [r7, #32]
 8001d7a:	e7fe      	b.n	8001d7a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d102      	bne.n	8001d88 <xQueueGenericCreateStatic+0x78>
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <xQueueGenericCreateStatic+0x7c>
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e000      	b.n	8001d8e <xQueueGenericCreateStatic+0x7e>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d109      	bne.n	8001da6 <xQueueGenericCreateStatic+0x96>
 8001d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d96:	f383 8811 	msr	BASEPRI, r3
 8001d9a:	f3bf 8f6f 	isb	sy
 8001d9e:	f3bf 8f4f 	dsb	sy
 8001da2:	61fb      	str	r3, [r7, #28]
 8001da4:	e7fe      	b.n	8001da4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001da6:	2348      	movs	r3, #72	; 0x48
 8001da8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	2b48      	cmp	r3, #72	; 0x48
 8001dae:	d009      	beq.n	8001dc4 <xQueueGenericCreateStatic+0xb4>
 8001db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db4:	f383 8811 	msr	BASEPRI, r3
 8001db8:	f3bf 8f6f 	isb	sy
 8001dbc:	f3bf 8f4f 	dsb	sy
 8001dc0:	61bb      	str	r3, [r7, #24]
 8001dc2:	e7fe      	b.n	8001dc2 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00d      	beq.n	8001dea <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001dd6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	4613      	mov	r3, r2
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	68b9      	ldr	r1, [r7, #8]
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f000 f842 	bl	8001e6e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3730      	adds	r7, #48	; 0x30
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08a      	sub	sp, #40	; 0x28
 8001df8:	af02      	add	r7, sp, #8
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d109      	bne.n	8001e1c <xQueueGenericCreate+0x28>
 8001e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e0c:	f383 8811 	msr	BASEPRI, r3
 8001e10:	f3bf 8f6f 	isb	sy
 8001e14:	f3bf 8f4f 	dsb	sy
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	e7fe      	b.n	8001e1a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d102      	bne.n	8001e28 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
 8001e26:	e004      	b.n	8001e32 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	fb02 f303 	mul.w	r3, r2, r3
 8001e30:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3348      	adds	r3, #72	; 0x48
 8001e36:	4618      	mov	r0, r3
 8001e38:	f001 fb80 	bl	800353c <pvPortMalloc>
 8001e3c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00f      	beq.n	8001e64 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	3348      	adds	r3, #72	; 0x48
 8001e48:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001e52:	79fa      	ldrb	r2, [r7, #7]
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	68b9      	ldr	r1, [r7, #8]
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f000 f805 	bl	8001e6e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001e64:	69bb      	ldr	r3, [r7, #24]
	}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3720      	adds	r7, #32
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b084      	sub	sp, #16
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	60f8      	str	r0, [r7, #12]
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	607a      	str	r2, [r7, #4]
 8001e7a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d103      	bne.n	8001e8a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	e002      	b.n	8001e90 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	68ba      	ldr	r2, [r7, #8]
 8001e9a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	69b8      	ldr	r0, [r7, #24]
 8001ea0:	f7ff fece 	bl	8001c40 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001ea4:	bf00      	nop
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08e      	sub	sp, #56	; 0x38
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
 8001eb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d109      	bne.n	8001edc <xQueueGenericSend+0x30>
 8001ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ecc:	f383 8811 	msr	BASEPRI, r3
 8001ed0:	f3bf 8f6f 	isb	sy
 8001ed4:	f3bf 8f4f 	dsb	sy
 8001ed8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eda:	e7fe      	b.n	8001eda <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d103      	bne.n	8001eea <xQueueGenericSend+0x3e>
 8001ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <xQueueGenericSend+0x42>
 8001eea:	2301      	movs	r3, #1
 8001eec:	e000      	b.n	8001ef0 <xQueueGenericSend+0x44>
 8001eee:	2300      	movs	r3, #0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d109      	bne.n	8001f08 <xQueueGenericSend+0x5c>
 8001ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ef8:	f383 8811 	msr	BASEPRI, r3
 8001efc:	f3bf 8f6f 	isb	sy
 8001f00:	f3bf 8f4f 	dsb	sy
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
 8001f06:	e7fe      	b.n	8001f06 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d103      	bne.n	8001f16 <xQueueGenericSend+0x6a>
 8001f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d101      	bne.n	8001f1a <xQueueGenericSend+0x6e>
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <xQueueGenericSend+0x70>
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d109      	bne.n	8001f34 <xQueueGenericSend+0x88>
 8001f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f24:	f383 8811 	msr	BASEPRI, r3
 8001f28:	f3bf 8f6f 	isb	sy
 8001f2c:	f3bf 8f4f 	dsb	sy
 8001f30:	623b      	str	r3, [r7, #32]
 8001f32:	e7fe      	b.n	8001f32 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001f34:	f001 f856 	bl	8002fe4 <xTaskGetSchedulerState>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d102      	bne.n	8001f44 <xQueueGenericSend+0x98>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <xQueueGenericSend+0x9c>
 8001f44:	2301      	movs	r3, #1
 8001f46:	e000      	b.n	8001f4a <xQueueGenericSend+0x9e>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d109      	bne.n	8001f62 <xQueueGenericSend+0xb6>
 8001f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f52:	f383 8811 	msr	BASEPRI, r3
 8001f56:	f3bf 8f6f 	isb	sy
 8001f5a:	f3bf 8f4f 	dsb	sy
 8001f5e:	61fb      	str	r3, [r7, #28]
 8001f60:	e7fe      	b.n	8001f60 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001f62:	f001 fa31 	bl	80033c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d302      	bcc.n	8001f78 <xQueueGenericSend+0xcc>
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d129      	bne.n	8001fcc <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	68b9      	ldr	r1, [r7, #8]
 8001f7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f7e:	f000 f96b 	bl	8002258 <prvCopyDataToQueue>
 8001f82:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d010      	beq.n	8001fae <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8e:	3324      	adds	r3, #36	; 0x24
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 fe6d 	bl	8002c70 <xTaskRemoveFromEventList>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d013      	beq.n	8001fc4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001f9c:	4b3f      	ldr	r3, [pc, #252]	; (800209c <xQueueGenericSend+0x1f0>)
 8001f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	f3bf 8f4f 	dsb	sy
 8001fa8:	f3bf 8f6f 	isb	sy
 8001fac:	e00a      	b.n	8001fc4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d007      	beq.n	8001fc4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001fb4:	4b39      	ldr	r3, [pc, #228]	; (800209c <xQueueGenericSend+0x1f0>)
 8001fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	f3bf 8f4f 	dsb	sy
 8001fc0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001fc4:	f001 fa2e 	bl	8003424 <vPortExitCritical>
				return pdPASS;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e063      	b.n	8002094 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d103      	bne.n	8001fda <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001fd2:	f001 fa27 	bl	8003424 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	e05c      	b.n	8002094 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d106      	bne.n	8001fee <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f000 fea5 	bl	8002d34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001fea:	2301      	movs	r3, #1
 8001fec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001fee:	f001 fa19 	bl	8003424 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001ff2:	f000 fc59 	bl	80028a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001ff6:	f001 f9e7 	bl	80033c8 <vPortEnterCritical>
 8001ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ffc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002000:	b25b      	sxtb	r3, r3
 8002002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002006:	d103      	bne.n	8002010 <xQueueGenericSend+0x164>
 8002008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800200a:	2200      	movs	r2, #0
 800200c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002012:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002016:	b25b      	sxtb	r3, r3
 8002018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800201c:	d103      	bne.n	8002026 <xQueueGenericSend+0x17a>
 800201e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002026:	f001 f9fd 	bl	8003424 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800202a:	1d3a      	adds	r2, r7, #4
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	4611      	mov	r1, r2
 8002032:	4618      	mov	r0, r3
 8002034:	f000 fe94 	bl	8002d60 <xTaskCheckForTimeOut>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d124      	bne.n	8002088 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800203e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002040:	f000 fa02 	bl	8002448 <prvIsQueueFull>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d018      	beq.n	800207c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800204a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800204c:	3310      	adds	r3, #16
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	4611      	mov	r1, r2
 8002052:	4618      	mov	r0, r3
 8002054:	f000 fde8 	bl	8002c28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002058:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800205a:	f000 f98d 	bl	8002378 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800205e:	f000 fc31 	bl	80028c4 <xTaskResumeAll>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	f47f af7c 	bne.w	8001f62 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800206a:	4b0c      	ldr	r3, [pc, #48]	; (800209c <xQueueGenericSend+0x1f0>)
 800206c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	f3bf 8f4f 	dsb	sy
 8002076:	f3bf 8f6f 	isb	sy
 800207a:	e772      	b.n	8001f62 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800207c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800207e:	f000 f97b 	bl	8002378 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002082:	f000 fc1f 	bl	80028c4 <xTaskResumeAll>
 8002086:	e76c      	b.n	8001f62 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002088:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800208a:	f000 f975 	bl	8002378 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800208e:	f000 fc19 	bl	80028c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002092:	2300      	movs	r3, #0
		}
	}
}
 8002094:	4618      	mov	r0, r3
 8002096:	3738      	adds	r7, #56	; 0x38
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	e000ed04 	.word	0xe000ed04

080020a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08c      	sub	sp, #48	; 0x30
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80020ac:	2300      	movs	r3, #0
 80020ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80020b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d109      	bne.n	80020ce <xQueueReceive+0x2e>
 80020ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020be:	f383 8811 	msr	BASEPRI, r3
 80020c2:	f3bf 8f6f 	isb	sy
 80020c6:	f3bf 8f4f 	dsb	sy
 80020ca:	623b      	str	r3, [r7, #32]
 80020cc:	e7fe      	b.n	80020cc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d103      	bne.n	80020dc <xQueueReceive+0x3c>
 80020d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <xQueueReceive+0x40>
 80020dc:	2301      	movs	r3, #1
 80020de:	e000      	b.n	80020e2 <xQueueReceive+0x42>
 80020e0:	2300      	movs	r3, #0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d109      	bne.n	80020fa <xQueueReceive+0x5a>
 80020e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ea:	f383 8811 	msr	BASEPRI, r3
 80020ee:	f3bf 8f6f 	isb	sy
 80020f2:	f3bf 8f4f 	dsb	sy
 80020f6:	61fb      	str	r3, [r7, #28]
 80020f8:	e7fe      	b.n	80020f8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80020fa:	f000 ff73 	bl	8002fe4 <xTaskGetSchedulerState>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d102      	bne.n	800210a <xQueueReceive+0x6a>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <xQueueReceive+0x6e>
 800210a:	2301      	movs	r3, #1
 800210c:	e000      	b.n	8002110 <xQueueReceive+0x70>
 800210e:	2300      	movs	r3, #0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d109      	bne.n	8002128 <xQueueReceive+0x88>
 8002114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002118:	f383 8811 	msr	BASEPRI, r3
 800211c:	f3bf 8f6f 	isb	sy
 8002120:	f3bf 8f4f 	dsb	sy
 8002124:	61bb      	str	r3, [r7, #24]
 8002126:	e7fe      	b.n	8002126 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002128:	f001 f94e 	bl	80033c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800212c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002130:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	2b00      	cmp	r3, #0
 8002136:	d01f      	beq.n	8002178 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002138:	68b9      	ldr	r1, [r7, #8]
 800213a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800213c:	f000 f8f6 	bl	800232c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	1e5a      	subs	r2, r3, #1
 8002144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002146:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00f      	beq.n	8002170 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002152:	3310      	adds	r3, #16
 8002154:	4618      	mov	r0, r3
 8002156:	f000 fd8b 	bl	8002c70 <xTaskRemoveFromEventList>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d007      	beq.n	8002170 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002160:	4b3c      	ldr	r3, [pc, #240]	; (8002254 <xQueueReceive+0x1b4>)
 8002162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	f3bf 8f4f 	dsb	sy
 800216c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002170:	f001 f958 	bl	8003424 <vPortExitCritical>
				return pdPASS;
 8002174:	2301      	movs	r3, #1
 8002176:	e069      	b.n	800224c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d103      	bne.n	8002186 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800217e:	f001 f951 	bl	8003424 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002182:	2300      	movs	r3, #0
 8002184:	e062      	b.n	800224c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002188:	2b00      	cmp	r3, #0
 800218a:	d106      	bne.n	800219a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800218c:	f107 0310 	add.w	r3, r7, #16
 8002190:	4618      	mov	r0, r3
 8002192:	f000 fdcf 	bl	8002d34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002196:	2301      	movs	r3, #1
 8002198:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800219a:	f001 f943 	bl	8003424 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800219e:	f000 fb83 	bl	80028a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80021a2:	f001 f911 	bl	80033c8 <vPortEnterCritical>
 80021a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021ac:	b25b      	sxtb	r3, r3
 80021ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b2:	d103      	bne.n	80021bc <xQueueReceive+0x11c>
 80021b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021c2:	b25b      	sxtb	r3, r3
 80021c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c8:	d103      	bne.n	80021d2 <xQueueReceive+0x132>
 80021ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021d2:	f001 f927 	bl	8003424 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80021d6:	1d3a      	adds	r2, r7, #4
 80021d8:	f107 0310 	add.w	r3, r7, #16
 80021dc:	4611      	mov	r1, r2
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 fdbe 	bl	8002d60 <xTaskCheckForTimeOut>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d123      	bne.n	8002232 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80021ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021ec:	f000 f916 	bl	800241c <prvIsQueueEmpty>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d017      	beq.n	8002226 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80021f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f8:	3324      	adds	r3, #36	; 0x24
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	4611      	mov	r1, r2
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 fd12 	bl	8002c28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002204:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002206:	f000 f8b7 	bl	8002378 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800220a:	f000 fb5b 	bl	80028c4 <xTaskResumeAll>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d189      	bne.n	8002128 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002214:	4b0f      	ldr	r3, [pc, #60]	; (8002254 <xQueueReceive+0x1b4>)
 8002216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	f3bf 8f4f 	dsb	sy
 8002220:	f3bf 8f6f 	isb	sy
 8002224:	e780      	b.n	8002128 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002228:	f000 f8a6 	bl	8002378 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800222c:	f000 fb4a 	bl	80028c4 <xTaskResumeAll>
 8002230:	e77a      	b.n	8002128 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002234:	f000 f8a0 	bl	8002378 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002238:	f000 fb44 	bl	80028c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800223c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800223e:	f000 f8ed 	bl	800241c <prvIsQueueEmpty>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	f43f af6f 	beq.w	8002128 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800224a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800224c:	4618      	mov	r0, r3
 800224e:	3730      	adds	r7, #48	; 0x30
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	e000ed04 	.word	0xe000ed04

08002258 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10d      	bne.n	8002292 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d14d      	bne.n	800231a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	4618      	mov	r0, r3
 8002284:	f000 fecc 	bl	8003020 <xTaskPriorityDisinherit>
 8002288:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	605a      	str	r2, [r3, #4]
 8002290:	e043      	b.n	800231a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d119      	bne.n	80022cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6898      	ldr	r0, [r3, #8]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	461a      	mov	r2, r3
 80022a2:	68b9      	ldr	r1, [r7, #8]
 80022a4:	f001 fb42 	bl	800392c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	441a      	add	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d32b      	bcc.n	800231a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	609a      	str	r2, [r3, #8]
 80022ca:	e026      	b.n	800231a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	68d8      	ldr	r0, [r3, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	461a      	mov	r2, r3
 80022d6:	68b9      	ldr	r1, [r7, #8]
 80022d8:	f001 fb28 	bl	800392c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	68da      	ldr	r2, [r3, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	425b      	negs	r3, r3
 80022e6:	441a      	add	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d207      	bcs.n	8002308 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	425b      	negs	r3, r3
 8002302:	441a      	add	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d105      	bne.n	800231a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d002      	beq.n	800231a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	3b01      	subs	r3, #1
 8002318:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002322:	697b      	ldr	r3, [r7, #20]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	2b00      	cmp	r3, #0
 800233c:	d018      	beq.n	8002370 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68da      	ldr	r2, [r3, #12]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	441a      	add	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68da      	ldr	r2, [r3, #12]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	429a      	cmp	r2, r3
 8002356:	d303      	bcc.n	8002360 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68d9      	ldr	r1, [r3, #12]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	461a      	mov	r2, r3
 800236a:	6838      	ldr	r0, [r7, #0]
 800236c:	f001 fade 	bl	800392c <memcpy>
	}
}
 8002370:	bf00      	nop
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002380:	f001 f822 	bl	80033c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800238a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800238c:	e011      	b.n	80023b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	2b00      	cmp	r3, #0
 8002394:	d012      	beq.n	80023bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3324      	adds	r3, #36	; 0x24
 800239a:	4618      	mov	r0, r3
 800239c:	f000 fc68 	bl	8002c70 <xTaskRemoveFromEventList>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80023a6:	f000 fd3b 	bl	8002e20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80023b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	dce9      	bgt.n	800238e <prvUnlockQueue+0x16>
 80023ba:	e000      	b.n	80023be <prvUnlockQueue+0x46>
					break;
 80023bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	22ff      	movs	r2, #255	; 0xff
 80023c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80023c6:	f001 f82d 	bl	8003424 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80023ca:	f000 fffd 	bl	80033c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80023d6:	e011      	b.n	80023fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d012      	beq.n	8002406 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3310      	adds	r3, #16
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 fc43 	bl	8002c70 <xTaskRemoveFromEventList>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80023f0:	f000 fd16 	bl	8002e20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80023f4:	7bbb      	ldrb	r3, [r7, #14]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80023fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002400:	2b00      	cmp	r3, #0
 8002402:	dce9      	bgt.n	80023d8 <prvUnlockQueue+0x60>
 8002404:	e000      	b.n	8002408 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002406:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	22ff      	movs	r2, #255	; 0xff
 800240c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002410:	f001 f808 	bl	8003424 <vPortExitCritical>
}
 8002414:	bf00      	nop
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002424:	f000 ffd0 	bl	80033c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242c:	2b00      	cmp	r3, #0
 800242e:	d102      	bne.n	8002436 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002430:	2301      	movs	r3, #1
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	e001      	b.n	800243a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800243a:	f000 fff3 	bl	8003424 <vPortExitCritical>

	return xReturn;
 800243e:	68fb      	ldr	r3, [r7, #12]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002450:	f000 ffba 	bl	80033c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245c:	429a      	cmp	r2, r3
 800245e:	d102      	bne.n	8002466 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002460:	2301      	movs	r3, #1
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	e001      	b.n	800246a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800246a:	f000 ffdb 	bl	8003424 <vPortExitCritical>

	return xReturn;
 800246e:	68fb      	ldr	r3, [r7, #12]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002478:	b580      	push	{r7, lr}
 800247a:	b08e      	sub	sp, #56	; 0x38
 800247c:	af04      	add	r7, sp, #16
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002488:	2b00      	cmp	r3, #0
 800248a:	d109      	bne.n	80024a0 <xTaskCreateStatic+0x28>
 800248c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002490:	f383 8811 	msr	BASEPRI, r3
 8002494:	f3bf 8f6f 	isb	sy
 8002498:	f3bf 8f4f 	dsb	sy
 800249c:	623b      	str	r3, [r7, #32]
 800249e:	e7fe      	b.n	800249e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80024a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d109      	bne.n	80024ba <xTaskCreateStatic+0x42>
 80024a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024aa:	f383 8811 	msr	BASEPRI, r3
 80024ae:	f3bf 8f6f 	isb	sy
 80024b2:	f3bf 8f4f 	dsb	sy
 80024b6:	61fb      	str	r3, [r7, #28]
 80024b8:	e7fe      	b.n	80024b8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80024ba:	2354      	movs	r3, #84	; 0x54
 80024bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	2b54      	cmp	r3, #84	; 0x54
 80024c2:	d009      	beq.n	80024d8 <xTaskCreateStatic+0x60>
 80024c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c8:	f383 8811 	msr	BASEPRI, r3
 80024cc:	f3bf 8f6f 	isb	sy
 80024d0:	f3bf 8f4f 	dsb	sy
 80024d4:	61bb      	str	r3, [r7, #24]
 80024d6:	e7fe      	b.n	80024d6 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80024d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d01e      	beq.n	800251c <xTaskCreateStatic+0xa4>
 80024de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d01b      	beq.n	800251c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80024e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	2202      	movs	r2, #2
 80024f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80024f6:	2300      	movs	r3, #0
 80024f8:	9303      	str	r3, [sp, #12]
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	9302      	str	r3, [sp, #8]
 80024fe:	f107 0314 	add.w	r3, r7, #20
 8002502:	9301      	str	r3, [sp, #4]
 8002504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	68b9      	ldr	r1, [r7, #8]
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 f850 	bl	80025b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002514:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002516:	f000 f8cb 	bl	80026b0 <prvAddNewTaskToReadyList>
 800251a:	e001      	b.n	8002520 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002520:	697b      	ldr	r3, [r7, #20]
	}
 8002522:	4618      	mov	r0, r3
 8002524:	3728      	adds	r7, #40	; 0x28
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800252a:	b580      	push	{r7, lr}
 800252c:	b08c      	sub	sp, #48	; 0x30
 800252e:	af04      	add	r7, sp, #16
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	603b      	str	r3, [r7, #0]
 8002536:	4613      	mov	r3, r2
 8002538:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800253a:	88fb      	ldrh	r3, [r7, #6]
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4618      	mov	r0, r3
 8002540:	f000 fffc 	bl	800353c <pvPortMalloc>
 8002544:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00e      	beq.n	800256a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800254c:	2054      	movs	r0, #84	; 0x54
 800254e:	f000 fff5 	bl	800353c <pvPortMalloc>
 8002552:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	631a      	str	r2, [r3, #48]	; 0x30
 8002560:	e005      	b.n	800256e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002562:	6978      	ldr	r0, [r7, #20]
 8002564:	f001 f8ac 	bl	80036c0 <vPortFree>
 8002568:	e001      	b.n	800256e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d017      	beq.n	80025a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800257c:	88fa      	ldrh	r2, [r7, #6]
 800257e:	2300      	movs	r3, #0
 8002580:	9303      	str	r3, [sp, #12]
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	9302      	str	r3, [sp, #8]
 8002586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002588:	9301      	str	r3, [sp, #4]
 800258a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	68b9      	ldr	r1, [r7, #8]
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 f80e 	bl	80025b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002598:	69f8      	ldr	r0, [r7, #28]
 800259a:	f000 f889 	bl	80026b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800259e:	2301      	movs	r3, #1
 80025a0:	61bb      	str	r3, [r7, #24]
 80025a2:	e002      	b.n	80025aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80025a4:	f04f 33ff 	mov.w	r3, #4294967295
 80025a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80025aa:	69bb      	ldr	r3, [r7, #24]
	}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3720      	adds	r7, #32
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b088      	sub	sp, #32
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
 80025c0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80025c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80025cc:	3b01      	subs	r3, #1
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	f023 0307 	bic.w	r3, r3, #7
 80025da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d009      	beq.n	80025fa <prvInitialiseNewTask+0x46>
 80025e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ea:	f383 8811 	msr	BASEPRI, r3
 80025ee:	f3bf 8f6f 	isb	sy
 80025f2:	f3bf 8f4f 	dsb	sy
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	e7fe      	b.n	80025f8 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
 80025fe:	e012      	b.n	8002626 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	4413      	add	r3, r2
 8002606:	7819      	ldrb	r1, [r3, #0]
 8002608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	4413      	add	r3, r2
 800260e:	3334      	adds	r3, #52	; 0x34
 8002610:	460a      	mov	r2, r1
 8002612:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	4413      	add	r3, r2
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d006      	beq.n	800262e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	3301      	adds	r3, #1
 8002624:	61fb      	str	r3, [r7, #28]
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	2b0f      	cmp	r3, #15
 800262a:	d9e9      	bls.n	8002600 <prvInitialiseNewTask+0x4c>
 800262c:	e000      	b.n	8002630 <prvInitialiseNewTask+0x7c>
		{
			break;
 800262e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263a:	2b06      	cmp	r3, #6
 800263c:	d901      	bls.n	8002642 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800263e:	2306      	movs	r3, #6
 8002640:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002644:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002646:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800264c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800264e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002650:	2200      	movs	r2, #0
 8002652:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002656:	3304      	adds	r3, #4
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff fa61 	bl	8001b20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800265e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002660:	3318      	adds	r3, #24
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff fa5c 	bl	8001b20 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800266c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800266e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002670:	f1c3 0207 	rsb	r2, r3, #7
 8002674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002676:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800267c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800267e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002680:	2200      	movs	r2, #0
 8002682:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	68f9      	ldr	r1, [r7, #12]
 8002690:	69b8      	ldr	r0, [r7, #24]
 8002692:	f000 fdaf 	bl	80031f4 <pxPortInitialiseStack>
 8002696:	4602      	mov	r2, r0
 8002698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800269c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80026a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80026a8:	bf00      	nop
 80026aa:	3720      	adds	r7, #32
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80026b8:	f000 fe86 	bl	80033c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80026bc:	4b2a      	ldr	r3, [pc, #168]	; (8002768 <prvAddNewTaskToReadyList+0xb8>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	3301      	adds	r3, #1
 80026c2:	4a29      	ldr	r2, [pc, #164]	; (8002768 <prvAddNewTaskToReadyList+0xb8>)
 80026c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80026c6:	4b29      	ldr	r3, [pc, #164]	; (800276c <prvAddNewTaskToReadyList+0xbc>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d109      	bne.n	80026e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80026ce:	4a27      	ldr	r2, [pc, #156]	; (800276c <prvAddNewTaskToReadyList+0xbc>)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80026d4:	4b24      	ldr	r3, [pc, #144]	; (8002768 <prvAddNewTaskToReadyList+0xb8>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d110      	bne.n	80026fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80026dc:	f000 fbc4 	bl	8002e68 <prvInitialiseTaskLists>
 80026e0:	e00d      	b.n	80026fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80026e2:	4b23      	ldr	r3, [pc, #140]	; (8002770 <prvAddNewTaskToReadyList+0xc0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d109      	bne.n	80026fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80026ea:	4b20      	ldr	r3, [pc, #128]	; (800276c <prvAddNewTaskToReadyList+0xbc>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d802      	bhi.n	80026fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80026f8:	4a1c      	ldr	r2, [pc, #112]	; (800276c <prvAddNewTaskToReadyList+0xbc>)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80026fe:	4b1d      	ldr	r3, [pc, #116]	; (8002774 <prvAddNewTaskToReadyList+0xc4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	3301      	adds	r3, #1
 8002704:	4a1b      	ldr	r2, [pc, #108]	; (8002774 <prvAddNewTaskToReadyList+0xc4>)
 8002706:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270c:	2201      	movs	r2, #1
 800270e:	409a      	lsls	r2, r3
 8002710:	4b19      	ldr	r3, [pc, #100]	; (8002778 <prvAddNewTaskToReadyList+0xc8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4313      	orrs	r3, r2
 8002716:	4a18      	ldr	r2, [pc, #96]	; (8002778 <prvAddNewTaskToReadyList+0xc8>)
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4a15      	ldr	r2, [pc, #84]	; (800277c <prvAddNewTaskToReadyList+0xcc>)
 8002728:	441a      	add	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3304      	adds	r3, #4
 800272e:	4619      	mov	r1, r3
 8002730:	4610      	mov	r0, r2
 8002732:	f7ff fa01 	bl	8001b38 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002736:	f000 fe75 	bl	8003424 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800273a:	4b0d      	ldr	r3, [pc, #52]	; (8002770 <prvAddNewTaskToReadyList+0xc0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00e      	beq.n	8002760 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002742:	4b0a      	ldr	r3, [pc, #40]	; (800276c <prvAddNewTaskToReadyList+0xbc>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274c:	429a      	cmp	r2, r3
 800274e:	d207      	bcs.n	8002760 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <prvAddNewTaskToReadyList+0xd0>)
 8002752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	f3bf 8f4f 	dsb	sy
 800275c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002760:	bf00      	nop
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20000380 	.word	0x20000380
 800276c:	20000280 	.word	0x20000280
 8002770:	2000038c 	.word	0x2000038c
 8002774:	2000039c 	.word	0x2000039c
 8002778:	20000388 	.word	0x20000388
 800277c:	20000284 	.word	0x20000284
 8002780:	e000ed04 	.word	0xe000ed04

08002784 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800278c:	2300      	movs	r3, #0
 800278e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d016      	beq.n	80027c4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002796:	4b13      	ldr	r3, [pc, #76]	; (80027e4 <vTaskDelay+0x60>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d009      	beq.n	80027b2 <vTaskDelay+0x2e>
 800279e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a2:	f383 8811 	msr	BASEPRI, r3
 80027a6:	f3bf 8f6f 	isb	sy
 80027aa:	f3bf 8f4f 	dsb	sy
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	e7fe      	b.n	80027b0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80027b2:	f000 f879 	bl	80028a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80027b6:	2100      	movs	r1, #0
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 fcb5 	bl	8003128 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80027be:	f000 f881 	bl	80028c4 <xTaskResumeAll>
 80027c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d107      	bne.n	80027da <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80027ca:	4b07      	ldr	r3, [pc, #28]	; (80027e8 <vTaskDelay+0x64>)
 80027cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	f3bf 8f4f 	dsb	sy
 80027d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80027da:	bf00      	nop
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	200003a8 	.word	0x200003a8
 80027e8:	e000ed04 	.word	0xe000ed04

080027ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08a      	sub	sp, #40	; 0x28
 80027f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80027fa:	463a      	mov	r2, r7
 80027fc:	1d39      	adds	r1, r7, #4
 80027fe:	f107 0308 	add.w	r3, r7, #8
 8002802:	4618      	mov	r0, r3
 8002804:	f7fd fca4 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002808:	6839      	ldr	r1, [r7, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	9202      	str	r2, [sp, #8]
 8002810:	9301      	str	r3, [sp, #4]
 8002812:	2300      	movs	r3, #0
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	2300      	movs	r3, #0
 8002818:	460a      	mov	r2, r1
 800281a:	491d      	ldr	r1, [pc, #116]	; (8002890 <vTaskStartScheduler+0xa4>)
 800281c:	481d      	ldr	r0, [pc, #116]	; (8002894 <vTaskStartScheduler+0xa8>)
 800281e:	f7ff fe2b 	bl	8002478 <xTaskCreateStatic>
 8002822:	4602      	mov	r2, r0
 8002824:	4b1c      	ldr	r3, [pc, #112]	; (8002898 <vTaskStartScheduler+0xac>)
 8002826:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002828:	4b1b      	ldr	r3, [pc, #108]	; (8002898 <vTaskStartScheduler+0xac>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d002      	beq.n	8002836 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002830:	2301      	movs	r3, #1
 8002832:	617b      	str	r3, [r7, #20]
 8002834:	e001      	b.n	800283a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d115      	bne.n	800286c <vTaskStartScheduler+0x80>
 8002840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002844:	f383 8811 	msr	BASEPRI, r3
 8002848:	f3bf 8f6f 	isb	sy
 800284c:	f3bf 8f4f 	dsb	sy
 8002850:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002852:	4b12      	ldr	r3, [pc, #72]	; (800289c <vTaskStartScheduler+0xb0>)
 8002854:	f04f 32ff 	mov.w	r2, #4294967295
 8002858:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800285a:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <vTaskStartScheduler+0xb4>)
 800285c:	2201      	movs	r2, #1
 800285e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002860:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <vTaskStartScheduler+0xb8>)
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002866:	f000 fd3f 	bl	80032e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800286a:	e00d      	b.n	8002888 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002872:	d109      	bne.n	8002888 <vTaskStartScheduler+0x9c>
 8002874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002878:	f383 8811 	msr	BASEPRI, r3
 800287c:	f3bf 8f6f 	isb	sy
 8002880:	f3bf 8f4f 	dsb	sy
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	e7fe      	b.n	8002886 <vTaskStartScheduler+0x9a>
}
 8002888:	bf00      	nop
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	08003a58 	.word	0x08003a58
 8002894:	08002e39 	.word	0x08002e39
 8002898:	200003a4 	.word	0x200003a4
 800289c:	200003a0 	.word	0x200003a0
 80028a0:	2000038c 	.word	0x2000038c
 80028a4:	20000384 	.word	0x20000384

080028a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80028ac:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <vTaskSuspendAll+0x18>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	3301      	adds	r3, #1
 80028b2:	4a03      	ldr	r2, [pc, #12]	; (80028c0 <vTaskSuspendAll+0x18>)
 80028b4:	6013      	str	r3, [r2, #0]
}
 80028b6:	bf00      	nop
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	200003a8 	.word	0x200003a8

080028c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80028ca:	2300      	movs	r3, #0
 80028cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80028ce:	2300      	movs	r3, #0
 80028d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80028d2:	4b41      	ldr	r3, [pc, #260]	; (80029d8 <xTaskResumeAll+0x114>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d109      	bne.n	80028ee <xTaskResumeAll+0x2a>
 80028da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028de:	f383 8811 	msr	BASEPRI, r3
 80028e2:	f3bf 8f6f 	isb	sy
 80028e6:	f3bf 8f4f 	dsb	sy
 80028ea:	603b      	str	r3, [r7, #0]
 80028ec:	e7fe      	b.n	80028ec <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80028ee:	f000 fd6b 	bl	80033c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80028f2:	4b39      	ldr	r3, [pc, #228]	; (80029d8 <xTaskResumeAll+0x114>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	4a37      	ldr	r2, [pc, #220]	; (80029d8 <xTaskResumeAll+0x114>)
 80028fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028fc:	4b36      	ldr	r3, [pc, #216]	; (80029d8 <xTaskResumeAll+0x114>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d161      	bne.n	80029c8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002904:	4b35      	ldr	r3, [pc, #212]	; (80029dc <xTaskResumeAll+0x118>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d05d      	beq.n	80029c8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800290c:	e02e      	b.n	800296c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800290e:	4b34      	ldr	r3, [pc, #208]	; (80029e0 <xTaskResumeAll+0x11c>)
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	3318      	adds	r3, #24
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff f967 	bl	8001bee <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	3304      	adds	r3, #4
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff f962 	bl	8001bee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292e:	2201      	movs	r2, #1
 8002930:	409a      	lsls	r2, r3
 8002932:	4b2c      	ldr	r3, [pc, #176]	; (80029e4 <xTaskResumeAll+0x120>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4313      	orrs	r3, r2
 8002938:	4a2a      	ldr	r2, [pc, #168]	; (80029e4 <xTaskResumeAll+0x120>)
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4a27      	ldr	r2, [pc, #156]	; (80029e8 <xTaskResumeAll+0x124>)
 800294a:	441a      	add	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	3304      	adds	r3, #4
 8002950:	4619      	mov	r1, r3
 8002952:	4610      	mov	r0, r2
 8002954:	f7ff f8f0 	bl	8001b38 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800295c:	4b23      	ldr	r3, [pc, #140]	; (80029ec <xTaskResumeAll+0x128>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002962:	429a      	cmp	r2, r3
 8002964:	d302      	bcc.n	800296c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8002966:	4b22      	ldr	r3, [pc, #136]	; (80029f0 <xTaskResumeAll+0x12c>)
 8002968:	2201      	movs	r2, #1
 800296a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800296c:	4b1c      	ldr	r3, [pc, #112]	; (80029e0 <xTaskResumeAll+0x11c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1cc      	bne.n	800290e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800297a:	f000 fb0f 	bl	8002f9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800297e:	4b1d      	ldr	r3, [pc, #116]	; (80029f4 <xTaskResumeAll+0x130>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d010      	beq.n	80029ac <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800298a:	f000 f837 	bl	80029fc <xTaskIncrementTick>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d002      	beq.n	800299a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8002994:	4b16      	ldr	r3, [pc, #88]	; (80029f0 <xTaskResumeAll+0x12c>)
 8002996:	2201      	movs	r2, #1
 8002998:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3b01      	subs	r3, #1
 800299e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f1      	bne.n	800298a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80029a6:	4b13      	ldr	r3, [pc, #76]	; (80029f4 <xTaskResumeAll+0x130>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80029ac:	4b10      	ldr	r3, [pc, #64]	; (80029f0 <xTaskResumeAll+0x12c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d009      	beq.n	80029c8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80029b4:	2301      	movs	r3, #1
 80029b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80029b8:	4b0f      	ldr	r3, [pc, #60]	; (80029f8 <xTaskResumeAll+0x134>)
 80029ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	f3bf 8f4f 	dsb	sy
 80029c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80029c8:	f000 fd2c 	bl	8003424 <vPortExitCritical>

	return xAlreadyYielded;
 80029cc:	68bb      	ldr	r3, [r7, #8]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	200003a8 	.word	0x200003a8
 80029dc:	20000380 	.word	0x20000380
 80029e0:	20000340 	.word	0x20000340
 80029e4:	20000388 	.word	0x20000388
 80029e8:	20000284 	.word	0x20000284
 80029ec:	20000280 	.word	0x20000280
 80029f0:	20000394 	.word	0x20000394
 80029f4:	20000390 	.word	0x20000390
 80029f8:	e000ed04 	.word	0xe000ed04

080029fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002a02:	2300      	movs	r3, #0
 8002a04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a06:	4b50      	ldr	r3, [pc, #320]	; (8002b48 <xTaskIncrementTick+0x14c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f040 808c 	bne.w	8002b28 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002a10:	4b4e      	ldr	r3, [pc, #312]	; (8002b4c <xTaskIncrementTick+0x150>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	3301      	adds	r3, #1
 8002a16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002a18:	4a4c      	ldr	r2, [pc, #304]	; (8002b4c <xTaskIncrementTick+0x150>)
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d11f      	bne.n	8002a64 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002a24:	4b4a      	ldr	r3, [pc, #296]	; (8002b50 <xTaskIncrementTick+0x154>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d009      	beq.n	8002a42 <xTaskIncrementTick+0x46>
 8002a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a32:	f383 8811 	msr	BASEPRI, r3
 8002a36:	f3bf 8f6f 	isb	sy
 8002a3a:	f3bf 8f4f 	dsb	sy
 8002a3e:	603b      	str	r3, [r7, #0]
 8002a40:	e7fe      	b.n	8002a40 <xTaskIncrementTick+0x44>
 8002a42:	4b43      	ldr	r3, [pc, #268]	; (8002b50 <xTaskIncrementTick+0x154>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	4b42      	ldr	r3, [pc, #264]	; (8002b54 <xTaskIncrementTick+0x158>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a40      	ldr	r2, [pc, #256]	; (8002b50 <xTaskIncrementTick+0x154>)
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	4a40      	ldr	r2, [pc, #256]	; (8002b54 <xTaskIncrementTick+0x158>)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	4b40      	ldr	r3, [pc, #256]	; (8002b58 <xTaskIncrementTick+0x15c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	4a3e      	ldr	r2, [pc, #248]	; (8002b58 <xTaskIncrementTick+0x15c>)
 8002a5e:	6013      	str	r3, [r2, #0]
 8002a60:	f000 fa9c 	bl	8002f9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002a64:	4b3d      	ldr	r3, [pc, #244]	; (8002b5c <xTaskIncrementTick+0x160>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d34d      	bcc.n	8002b0a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a6e:	4b38      	ldr	r3, [pc, #224]	; (8002b50 <xTaskIncrementTick+0x154>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <xTaskIncrementTick+0x80>
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e000      	b.n	8002a7e <xTaskIncrementTick+0x82>
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d004      	beq.n	8002a8c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a82:	4b36      	ldr	r3, [pc, #216]	; (8002b5c <xTaskIncrementTick+0x160>)
 8002a84:	f04f 32ff 	mov.w	r2, #4294967295
 8002a88:	601a      	str	r2, [r3, #0]
					break;
 8002a8a:	e03e      	b.n	8002b0a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002a8c:	4b30      	ldr	r3, [pc, #192]	; (8002b50 <xTaskIncrementTick+0x154>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d203      	bcs.n	8002aac <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002aa4:	4a2d      	ldr	r2, [pc, #180]	; (8002b5c <xTaskIncrementTick+0x160>)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6013      	str	r3, [r2, #0]
						break;
 8002aaa:	e02e      	b.n	8002b0a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	3304      	adds	r3, #4
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff f89c 	bl	8001bee <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d004      	beq.n	8002ac8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	3318      	adds	r3, #24
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff f893 	bl	8001bee <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	2201      	movs	r2, #1
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	4b23      	ldr	r3, [pc, #140]	; (8002b60 <xTaskIncrementTick+0x164>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	4a22      	ldr	r2, [pc, #136]	; (8002b60 <xTaskIncrementTick+0x164>)
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ade:	4613      	mov	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4a1f      	ldr	r2, [pc, #124]	; (8002b64 <xTaskIncrementTick+0x168>)
 8002ae8:	441a      	add	r2, r3
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	3304      	adds	r3, #4
 8002aee:	4619      	mov	r1, r3
 8002af0:	4610      	mov	r0, r2
 8002af2:	f7ff f821 	bl	8001b38 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002afa:	4b1b      	ldr	r3, [pc, #108]	; (8002b68 <xTaskIncrementTick+0x16c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d3b4      	bcc.n	8002a6e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002b04:	2301      	movs	r3, #1
 8002b06:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b08:	e7b1      	b.n	8002a6e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002b0a:	4b17      	ldr	r3, [pc, #92]	; (8002b68 <xTaskIncrementTick+0x16c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b10:	4914      	ldr	r1, [pc, #80]	; (8002b64 <xTaskIncrementTick+0x168>)
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d907      	bls.n	8002b32 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8002b22:	2301      	movs	r3, #1
 8002b24:	617b      	str	r3, [r7, #20]
 8002b26:	e004      	b.n	8002b32 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002b28:	4b10      	ldr	r3, [pc, #64]	; (8002b6c <xTaskIncrementTick+0x170>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	4a0f      	ldr	r2, [pc, #60]	; (8002b6c <xTaskIncrementTick+0x170>)
 8002b30:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002b32:	4b0f      	ldr	r3, [pc, #60]	; (8002b70 <xTaskIncrementTick+0x174>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002b3e:	697b      	ldr	r3, [r7, #20]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	200003a8 	.word	0x200003a8
 8002b4c:	20000384 	.word	0x20000384
 8002b50:	20000338 	.word	0x20000338
 8002b54:	2000033c 	.word	0x2000033c
 8002b58:	20000398 	.word	0x20000398
 8002b5c:	200003a0 	.word	0x200003a0
 8002b60:	20000388 	.word	0x20000388
 8002b64:	20000284 	.word	0x20000284
 8002b68:	20000280 	.word	0x20000280
 8002b6c:	20000390 	.word	0x20000390
 8002b70:	20000394 	.word	0x20000394

08002b74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002b74:	b480      	push	{r7}
 8002b76:	b087      	sub	sp, #28
 8002b78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002b7a:	4b26      	ldr	r3, [pc, #152]	; (8002c14 <vTaskSwitchContext+0xa0>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002b82:	4b25      	ldr	r3, [pc, #148]	; (8002c18 <vTaskSwitchContext+0xa4>)
 8002b84:	2201      	movs	r2, #1
 8002b86:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002b88:	e03e      	b.n	8002c08 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8002b8a:	4b23      	ldr	r3, [pc, #140]	; (8002c18 <vTaskSwitchContext+0xa4>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002b90:	4b22      	ldr	r3, [pc, #136]	; (8002c1c <vTaskSwitchContext+0xa8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	fab3 f383 	clz	r3, r3
 8002b9c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002b9e:	7afb      	ldrb	r3, [r7, #11]
 8002ba0:	f1c3 031f 	rsb	r3, r3, #31
 8002ba4:	617b      	str	r3, [r7, #20]
 8002ba6:	491e      	ldr	r1, [pc, #120]	; (8002c20 <vTaskSwitchContext+0xac>)
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	4613      	mov	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d109      	bne.n	8002bce <vTaskSwitchContext+0x5a>
	__asm volatile
 8002bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bbe:	f383 8811 	msr	BASEPRI, r3
 8002bc2:	f3bf 8f6f 	isb	sy
 8002bc6:	f3bf 8f4f 	dsb	sy
 8002bca:	607b      	str	r3, [r7, #4]
 8002bcc:	e7fe      	b.n	8002bcc <vTaskSwitchContext+0x58>
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4a11      	ldr	r2, [pc, #68]	; (8002c20 <vTaskSwitchContext+0xac>)
 8002bda:	4413      	add	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	605a      	str	r2, [r3, #4]
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	3308      	adds	r3, #8
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d104      	bne.n	8002bfe <vTaskSwitchContext+0x8a>
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	4a07      	ldr	r2, [pc, #28]	; (8002c24 <vTaskSwitchContext+0xb0>)
 8002c06:	6013      	str	r3, [r2, #0]
}
 8002c08:	bf00      	nop
 8002c0a:	371c      	adds	r7, #28
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bc80      	pop	{r7}
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	200003a8 	.word	0x200003a8
 8002c18:	20000394 	.word	0x20000394
 8002c1c:	20000388 	.word	0x20000388
 8002c20:	20000284 	.word	0x20000284
 8002c24:	20000280 	.word	0x20000280

08002c28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d109      	bne.n	8002c4c <vTaskPlaceOnEventList+0x24>
 8002c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3c:	f383 8811 	msr	BASEPRI, r3
 8002c40:	f3bf 8f6f 	isb	sy
 8002c44:	f3bf 8f4f 	dsb	sy
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	e7fe      	b.n	8002c4a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002c4c:	4b07      	ldr	r3, [pc, #28]	; (8002c6c <vTaskPlaceOnEventList+0x44>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	3318      	adds	r3, #24
 8002c52:	4619      	mov	r1, r3
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7fe ff92 	bl	8001b7e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	6838      	ldr	r0, [r7, #0]
 8002c5e:	f000 fa63 	bl	8003128 <prvAddCurrentTaskToDelayedList>
}
 8002c62:	bf00      	nop
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000280 	.word	0x20000280

08002c70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d109      	bne.n	8002c9a <xTaskRemoveFromEventList+0x2a>
 8002c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8a:	f383 8811 	msr	BASEPRI, r3
 8002c8e:	f3bf 8f6f 	isb	sy
 8002c92:	f3bf 8f4f 	dsb	sy
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	e7fe      	b.n	8002c98 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	3318      	adds	r3, #24
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fe ffa5 	bl	8001bee <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ca4:	4b1d      	ldr	r3, [pc, #116]	; (8002d1c <xTaskRemoveFromEventList+0xac>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d11c      	bne.n	8002ce6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	3304      	adds	r3, #4
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7fe ff9c 	bl	8001bee <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cba:	2201      	movs	r2, #1
 8002cbc:	409a      	lsls	r2, r3
 8002cbe:	4b18      	ldr	r3, [pc, #96]	; (8002d20 <xTaskRemoveFromEventList+0xb0>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	4a16      	ldr	r2, [pc, #88]	; (8002d20 <xTaskRemoveFromEventList+0xb0>)
 8002cc6:	6013      	str	r3, [r2, #0]
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4a13      	ldr	r2, [pc, #76]	; (8002d24 <xTaskRemoveFromEventList+0xb4>)
 8002cd6:	441a      	add	r2, r3
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	3304      	adds	r3, #4
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4610      	mov	r0, r2
 8002ce0:	f7fe ff2a 	bl	8001b38 <vListInsertEnd>
 8002ce4:	e005      	b.n	8002cf2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	3318      	adds	r3, #24
 8002cea:	4619      	mov	r1, r3
 8002cec:	480e      	ldr	r0, [pc, #56]	; (8002d28 <xTaskRemoveFromEventList+0xb8>)
 8002cee:	f7fe ff23 	bl	8001b38 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf6:	4b0d      	ldr	r3, [pc, #52]	; (8002d2c <xTaskRemoveFromEventList+0xbc>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d905      	bls.n	8002d0c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002d00:	2301      	movs	r3, #1
 8002d02:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002d04:	4b0a      	ldr	r3, [pc, #40]	; (8002d30 <xTaskRemoveFromEventList+0xc0>)
 8002d06:	2201      	movs	r2, #1
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	e001      	b.n	8002d10 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002d10:	697b      	ldr	r3, [r7, #20]
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3718      	adds	r7, #24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	200003a8 	.word	0x200003a8
 8002d20:	20000388 	.word	0x20000388
 8002d24:	20000284 	.word	0x20000284
 8002d28:	20000340 	.word	0x20000340
 8002d2c:	20000280 	.word	0x20000280
 8002d30:	20000394 	.word	0x20000394

08002d34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002d3c:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <vTaskInternalSetTimeOutState+0x24>)
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002d44:	4b05      	ldr	r3, [pc, #20]	; (8002d5c <vTaskInternalSetTimeOutState+0x28>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	605a      	str	r2, [r3, #4]
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	20000398 	.word	0x20000398
 8002d5c:	20000384 	.word	0x20000384

08002d60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d109      	bne.n	8002d84 <xTaskCheckForTimeOut+0x24>
 8002d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d74:	f383 8811 	msr	BASEPRI, r3
 8002d78:	f3bf 8f6f 	isb	sy
 8002d7c:	f3bf 8f4f 	dsb	sy
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	e7fe      	b.n	8002d82 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d109      	bne.n	8002d9e <xTaskCheckForTimeOut+0x3e>
 8002d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8e:	f383 8811 	msr	BASEPRI, r3
 8002d92:	f3bf 8f6f 	isb	sy
 8002d96:	f3bf 8f4f 	dsb	sy
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	e7fe      	b.n	8002d9c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8002d9e:	f000 fb13 	bl	80033c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002da2:	4b1d      	ldr	r3, [pc, #116]	; (8002e18 <xTaskCheckForTimeOut+0xb8>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dba:	d102      	bne.n	8002dc2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	61fb      	str	r3, [r7, #28]
 8002dc0:	e023      	b.n	8002e0a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	4b15      	ldr	r3, [pc, #84]	; (8002e1c <xTaskCheckForTimeOut+0xbc>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d007      	beq.n	8002dde <xTaskCheckForTimeOut+0x7e>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d302      	bcc.n	8002dde <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	61fb      	str	r3, [r7, #28]
 8002ddc:	e015      	b.n	8002e0a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d20b      	bcs.n	8002e00 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	1ad2      	subs	r2, r2, r3
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7ff ff9d 	bl	8002d34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61fb      	str	r3, [r7, #28]
 8002dfe:	e004      	b.n	8002e0a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002e06:	2301      	movs	r3, #1
 8002e08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002e0a:	f000 fb0b 	bl	8003424 <vPortExitCritical>

	return xReturn;
 8002e0e:	69fb      	ldr	r3, [r7, #28]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3720      	adds	r7, #32
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	20000384 	.word	0x20000384
 8002e1c:	20000398 	.word	0x20000398

08002e20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002e24:	4b03      	ldr	r3, [pc, #12]	; (8002e34 <vTaskMissedYield+0x14>)
 8002e26:	2201      	movs	r2, #1
 8002e28:	601a      	str	r2, [r3, #0]
}
 8002e2a:	bf00      	nop
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bc80      	pop	{r7}
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	20000394 	.word	0x20000394

08002e38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002e40:	f000 f852 	bl	8002ee8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002e44:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <prvIdleTask+0x28>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d9f9      	bls.n	8002e40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002e4c:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <prvIdleTask+0x2c>)
 8002e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	f3bf 8f4f 	dsb	sy
 8002e58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002e5c:	e7f0      	b.n	8002e40 <prvIdleTask+0x8>
 8002e5e:	bf00      	nop
 8002e60:	20000284 	.word	0x20000284
 8002e64:	e000ed04 	.word	0xe000ed04

08002e68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e6e:	2300      	movs	r3, #0
 8002e70:	607b      	str	r3, [r7, #4]
 8002e72:	e00c      	b.n	8002e8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	4613      	mov	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4a12      	ldr	r2, [pc, #72]	; (8002ec8 <prvInitialiseTaskLists+0x60>)
 8002e80:	4413      	add	r3, r2
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fe fe2d 	bl	8001ae2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	607b      	str	r3, [r7, #4]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b06      	cmp	r3, #6
 8002e92:	d9ef      	bls.n	8002e74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002e94:	480d      	ldr	r0, [pc, #52]	; (8002ecc <prvInitialiseTaskLists+0x64>)
 8002e96:	f7fe fe24 	bl	8001ae2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002e9a:	480d      	ldr	r0, [pc, #52]	; (8002ed0 <prvInitialiseTaskLists+0x68>)
 8002e9c:	f7fe fe21 	bl	8001ae2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002ea0:	480c      	ldr	r0, [pc, #48]	; (8002ed4 <prvInitialiseTaskLists+0x6c>)
 8002ea2:	f7fe fe1e 	bl	8001ae2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002ea6:	480c      	ldr	r0, [pc, #48]	; (8002ed8 <prvInitialiseTaskLists+0x70>)
 8002ea8:	f7fe fe1b 	bl	8001ae2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002eac:	480b      	ldr	r0, [pc, #44]	; (8002edc <prvInitialiseTaskLists+0x74>)
 8002eae:	f7fe fe18 	bl	8001ae2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002eb2:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <prvInitialiseTaskLists+0x78>)
 8002eb4:	4a05      	ldr	r2, [pc, #20]	; (8002ecc <prvInitialiseTaskLists+0x64>)
 8002eb6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002eb8:	4b0a      	ldr	r3, [pc, #40]	; (8002ee4 <prvInitialiseTaskLists+0x7c>)
 8002eba:	4a05      	ldr	r2, [pc, #20]	; (8002ed0 <prvInitialiseTaskLists+0x68>)
 8002ebc:	601a      	str	r2, [r3, #0]
}
 8002ebe:	bf00      	nop
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	20000284 	.word	0x20000284
 8002ecc:	20000310 	.word	0x20000310
 8002ed0:	20000324 	.word	0x20000324
 8002ed4:	20000340 	.word	0x20000340
 8002ed8:	20000354 	.word	0x20000354
 8002edc:	2000036c 	.word	0x2000036c
 8002ee0:	20000338 	.word	0x20000338
 8002ee4:	2000033c 	.word	0x2000033c

08002ee8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002eee:	e019      	b.n	8002f24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002ef0:	f000 fa6a 	bl	80033c8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002ef4:	4b0f      	ldr	r3, [pc, #60]	; (8002f34 <prvCheckTasksWaitingTermination+0x4c>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3304      	adds	r3, #4
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7fe fe74 	bl	8001bee <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002f06:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <prvCheckTasksWaitingTermination+0x50>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	4a0a      	ldr	r2, [pc, #40]	; (8002f38 <prvCheckTasksWaitingTermination+0x50>)
 8002f0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002f10:	4b0a      	ldr	r3, [pc, #40]	; (8002f3c <prvCheckTasksWaitingTermination+0x54>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	3b01      	subs	r3, #1
 8002f16:	4a09      	ldr	r2, [pc, #36]	; (8002f3c <prvCheckTasksWaitingTermination+0x54>)
 8002f18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002f1a:	f000 fa83 	bl	8003424 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f80e 	bl	8002f40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f24:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <prvCheckTasksWaitingTermination+0x54>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1e1      	bne.n	8002ef0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002f2c:	bf00      	nop
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	20000354 	.word	0x20000354
 8002f38:	20000380 	.word	0x20000380
 8002f3c:	20000368 	.word	0x20000368

08002f40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d108      	bne.n	8002f64 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 fbb2 	bl	80036c0 <vPortFree>
				vPortFree( pxTCB );
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 fbaf 	bl	80036c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002f62:	e017      	b.n	8002f94 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d103      	bne.n	8002f76 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 fba6 	bl	80036c0 <vPortFree>
	}
 8002f74:	e00e      	b.n	8002f94 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d009      	beq.n	8002f94 <prvDeleteTCB+0x54>
 8002f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f84:	f383 8811 	msr	BASEPRI, r3
 8002f88:	f3bf 8f6f 	isb	sy
 8002f8c:	f3bf 8f4f 	dsb	sy
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	e7fe      	b.n	8002f92 <prvDeleteTCB+0x52>
	}
 8002f94:	bf00      	nop
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fa2:	4b0e      	ldr	r3, [pc, #56]	; (8002fdc <prvResetNextTaskUnblockTime+0x40>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <prvResetNextTaskUnblockTime+0x14>
 8002fac:	2301      	movs	r3, #1
 8002fae:	e000      	b.n	8002fb2 <prvResetNextTaskUnblockTime+0x16>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d004      	beq.n	8002fc0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002fb6:	4b0a      	ldr	r3, [pc, #40]	; (8002fe0 <prvResetNextTaskUnblockTime+0x44>)
 8002fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fbc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002fbe:	e008      	b.n	8002fd2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002fc0:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <prvResetNextTaskUnblockTime+0x40>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	4a04      	ldr	r2, [pc, #16]	; (8002fe0 <prvResetNextTaskUnblockTime+0x44>)
 8002fd0:	6013      	str	r3, [r2, #0]
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr
 8002fdc:	20000338 	.word	0x20000338
 8002fe0:	200003a0 	.word	0x200003a0

08002fe4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002fea:	4b0b      	ldr	r3, [pc, #44]	; (8003018 <xTaskGetSchedulerState+0x34>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d102      	bne.n	8002ff8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	607b      	str	r3, [r7, #4]
 8002ff6:	e008      	b.n	800300a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ff8:	4b08      	ldr	r3, [pc, #32]	; (800301c <xTaskGetSchedulerState+0x38>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d102      	bne.n	8003006 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003000:	2302      	movs	r3, #2
 8003002:	607b      	str	r3, [r7, #4]
 8003004:	e001      	b.n	800300a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003006:	2300      	movs	r3, #0
 8003008:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800300a:	687b      	ldr	r3, [r7, #4]
	}
 800300c:	4618      	mov	r0, r3
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	2000038c 	.word	0x2000038c
 800301c:	200003a8 	.word	0x200003a8

08003020 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800302c:	2300      	movs	r3, #0
 800302e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d06c      	beq.n	8003110 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003036:	4b39      	ldr	r3, [pc, #228]	; (800311c <xTaskPriorityDisinherit+0xfc>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	429a      	cmp	r2, r3
 800303e:	d009      	beq.n	8003054 <xTaskPriorityDisinherit+0x34>
 8003040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003044:	f383 8811 	msr	BASEPRI, r3
 8003048:	f3bf 8f6f 	isb	sy
 800304c:	f3bf 8f4f 	dsb	sy
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	e7fe      	b.n	8003052 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003058:	2b00      	cmp	r3, #0
 800305a:	d109      	bne.n	8003070 <xTaskPriorityDisinherit+0x50>
 800305c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003060:	f383 8811 	msr	BASEPRI, r3
 8003064:	f3bf 8f6f 	isb	sy
 8003068:	f3bf 8f4f 	dsb	sy
 800306c:	60bb      	str	r3, [r7, #8]
 800306e:	e7fe      	b.n	800306e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003074:	1e5a      	subs	r2, r3, #1
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003082:	429a      	cmp	r2, r3
 8003084:	d044      	beq.n	8003110 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800308a:	2b00      	cmp	r3, #0
 800308c:	d140      	bne.n	8003110 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	3304      	adds	r3, #4
 8003092:	4618      	mov	r0, r3
 8003094:	f7fe fdab 	bl	8001bee <uxListRemove>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d115      	bne.n	80030ca <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a2:	491f      	ldr	r1, [pc, #124]	; (8003120 <xTaskPriorityDisinherit+0x100>)
 80030a4:	4613      	mov	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10a      	bne.n	80030ca <xTaskPriorityDisinherit+0xaa>
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b8:	2201      	movs	r2, #1
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43da      	mvns	r2, r3
 80030c0:	4b18      	ldr	r3, [pc, #96]	; (8003124 <xTaskPriorityDisinherit+0x104>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4013      	ands	r3, r2
 80030c6:	4a17      	ldr	r2, [pc, #92]	; (8003124 <xTaskPriorityDisinherit+0x104>)
 80030c8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d6:	f1c3 0207 	rsb	r2, r3, #7
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e2:	2201      	movs	r2, #1
 80030e4:	409a      	lsls	r2, r3
 80030e6:	4b0f      	ldr	r3, [pc, #60]	; (8003124 <xTaskPriorityDisinherit+0x104>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	4a0d      	ldr	r2, [pc, #52]	; (8003124 <xTaskPriorityDisinherit+0x104>)
 80030ee:	6013      	str	r3, [r2, #0]
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f4:	4613      	mov	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4a08      	ldr	r2, [pc, #32]	; (8003120 <xTaskPriorityDisinherit+0x100>)
 80030fe:	441a      	add	r2, r3
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	3304      	adds	r3, #4
 8003104:	4619      	mov	r1, r3
 8003106:	4610      	mov	r0, r2
 8003108:	f7fe fd16 	bl	8001b38 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800310c:	2301      	movs	r3, #1
 800310e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003110:	697b      	ldr	r3, [r7, #20]
	}
 8003112:	4618      	mov	r0, r3
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	20000280 	.word	0x20000280
 8003120:	20000284 	.word	0x20000284
 8003124:	20000388 	.word	0x20000388

08003128 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003132:	4b29      	ldr	r3, [pc, #164]	; (80031d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003138:	4b28      	ldr	r3, [pc, #160]	; (80031dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	3304      	adds	r3, #4
 800313e:	4618      	mov	r0, r3
 8003140:	f7fe fd55 	bl	8001bee <uxListRemove>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10b      	bne.n	8003162 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800314a:	4b24      	ldr	r3, [pc, #144]	; (80031dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003150:	2201      	movs	r2, #1
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	43da      	mvns	r2, r3
 8003158:	4b21      	ldr	r3, [pc, #132]	; (80031e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4013      	ands	r3, r2
 800315e:	4a20      	ldr	r2, [pc, #128]	; (80031e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003160:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003168:	d10a      	bne.n	8003180 <prvAddCurrentTaskToDelayedList+0x58>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d007      	beq.n	8003180 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003170:	4b1a      	ldr	r3, [pc, #104]	; (80031dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	3304      	adds	r3, #4
 8003176:	4619      	mov	r1, r3
 8003178:	481a      	ldr	r0, [pc, #104]	; (80031e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800317a:	f7fe fcdd 	bl	8001b38 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800317e:	e026      	b.n	80031ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4413      	add	r3, r2
 8003186:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003188:	4b14      	ldr	r3, [pc, #80]	; (80031dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	429a      	cmp	r2, r3
 8003196:	d209      	bcs.n	80031ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003198:	4b13      	ldr	r3, [pc, #76]	; (80031e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	4b0f      	ldr	r3, [pc, #60]	; (80031dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	3304      	adds	r3, #4
 80031a2:	4619      	mov	r1, r3
 80031a4:	4610      	mov	r0, r2
 80031a6:	f7fe fcea 	bl	8001b7e <vListInsert>
}
 80031aa:	e010      	b.n	80031ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031ac:	4b0f      	ldr	r3, [pc, #60]	; (80031ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	4b0a      	ldr	r3, [pc, #40]	; (80031dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	3304      	adds	r3, #4
 80031b6:	4619      	mov	r1, r3
 80031b8:	4610      	mov	r0, r2
 80031ba:	f7fe fce0 	bl	8001b7e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80031be:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d202      	bcs.n	80031ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80031c8:	4a09      	ldr	r2, [pc, #36]	; (80031f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	6013      	str	r3, [r2, #0]
}
 80031ce:	bf00      	nop
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	20000384 	.word	0x20000384
 80031dc:	20000280 	.word	0x20000280
 80031e0:	20000388 	.word	0x20000388
 80031e4:	2000036c 	.word	0x2000036c
 80031e8:	2000033c 	.word	0x2000033c
 80031ec:	20000338 	.word	0x20000338
 80031f0:	200003a0 	.word	0x200003a0

080031f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	3b04      	subs	r3, #4
 8003204:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800320c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	3b04      	subs	r3, #4
 8003212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f023 0201 	bic.w	r2, r3, #1
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	3b04      	subs	r3, #4
 8003222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003224:	4a08      	ldr	r2, [pc, #32]	; (8003248 <pxPortInitialiseStack+0x54>)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	3b14      	subs	r3, #20
 800322e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	3b20      	subs	r3, #32
 800323a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800323c:	68fb      	ldr	r3, [r7, #12]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	bc80      	pop	{r7}
 8003246:	4770      	bx	lr
 8003248:	0800324d 	.word	0x0800324d

0800324c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003252:	2300      	movs	r3, #0
 8003254:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003256:	4b10      	ldr	r3, [pc, #64]	; (8003298 <prvTaskExitError+0x4c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325e:	d009      	beq.n	8003274 <prvTaskExitError+0x28>
 8003260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003264:	f383 8811 	msr	BASEPRI, r3
 8003268:	f3bf 8f6f 	isb	sy
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	e7fe      	b.n	8003272 <prvTaskExitError+0x26>
 8003274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003278:	f383 8811 	msr	BASEPRI, r3
 800327c:	f3bf 8f6f 	isb	sy
 8003280:	f3bf 8f4f 	dsb	sy
 8003284:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003286:	bf00      	nop
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0fc      	beq.n	8003288 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800328e:	bf00      	nop
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr
 8003298:	2000000c 	.word	0x2000000c
 800329c:	00000000 	.word	0x00000000

080032a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80032a0:	4b07      	ldr	r3, [pc, #28]	; (80032c0 <pxCurrentTCBConst2>)
 80032a2:	6819      	ldr	r1, [r3, #0]
 80032a4:	6808      	ldr	r0, [r1, #0]
 80032a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80032aa:	f380 8809 	msr	PSP, r0
 80032ae:	f3bf 8f6f 	isb	sy
 80032b2:	f04f 0000 	mov.w	r0, #0
 80032b6:	f380 8811 	msr	BASEPRI, r0
 80032ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80032be:	4770      	bx	lr

080032c0 <pxCurrentTCBConst2>:
 80032c0:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80032c4:	bf00      	nop
 80032c6:	bf00      	nop

080032c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80032c8:	4806      	ldr	r0, [pc, #24]	; (80032e4 <prvPortStartFirstTask+0x1c>)
 80032ca:	6800      	ldr	r0, [r0, #0]
 80032cc:	6800      	ldr	r0, [r0, #0]
 80032ce:	f380 8808 	msr	MSP, r0
 80032d2:	b662      	cpsie	i
 80032d4:	b661      	cpsie	f
 80032d6:	f3bf 8f4f 	dsb	sy
 80032da:	f3bf 8f6f 	isb	sy
 80032de:	df00      	svc	0
 80032e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80032e2:	bf00      	nop
 80032e4:	e000ed08 	.word	0xe000ed08

080032e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80032ee:	4b31      	ldr	r3, [pc, #196]	; (80033b4 <xPortStartScheduler+0xcc>)
 80032f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	22ff      	movs	r2, #255	; 0xff
 80032fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003308:	78fb      	ldrb	r3, [r7, #3]
 800330a:	b2db      	uxtb	r3, r3
 800330c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003310:	b2da      	uxtb	r2, r3
 8003312:	4b29      	ldr	r3, [pc, #164]	; (80033b8 <xPortStartScheduler+0xd0>)
 8003314:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003316:	4b29      	ldr	r3, [pc, #164]	; (80033bc <xPortStartScheduler+0xd4>)
 8003318:	2207      	movs	r2, #7
 800331a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800331c:	e009      	b.n	8003332 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800331e:	4b27      	ldr	r3, [pc, #156]	; (80033bc <xPortStartScheduler+0xd4>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	3b01      	subs	r3, #1
 8003324:	4a25      	ldr	r2, [pc, #148]	; (80033bc <xPortStartScheduler+0xd4>)
 8003326:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003328:	78fb      	ldrb	r3, [r7, #3]
 800332a:	b2db      	uxtb	r3, r3
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	b2db      	uxtb	r3, r3
 8003330:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003332:	78fb      	ldrb	r3, [r7, #3]
 8003334:	b2db      	uxtb	r3, r3
 8003336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800333a:	2b80      	cmp	r3, #128	; 0x80
 800333c:	d0ef      	beq.n	800331e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800333e:	4b1f      	ldr	r3, [pc, #124]	; (80033bc <xPortStartScheduler+0xd4>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f1c3 0307 	rsb	r3, r3, #7
 8003346:	2b04      	cmp	r3, #4
 8003348:	d009      	beq.n	800335e <xPortStartScheduler+0x76>
 800334a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334e:	f383 8811 	msr	BASEPRI, r3
 8003352:	f3bf 8f6f 	isb	sy
 8003356:	f3bf 8f4f 	dsb	sy
 800335a:	60bb      	str	r3, [r7, #8]
 800335c:	e7fe      	b.n	800335c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800335e:	4b17      	ldr	r3, [pc, #92]	; (80033bc <xPortStartScheduler+0xd4>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	021b      	lsls	r3, r3, #8
 8003364:	4a15      	ldr	r2, [pc, #84]	; (80033bc <xPortStartScheduler+0xd4>)
 8003366:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003368:	4b14      	ldr	r3, [pc, #80]	; (80033bc <xPortStartScheduler+0xd4>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003370:	4a12      	ldr	r2, [pc, #72]	; (80033bc <xPortStartScheduler+0xd4>)
 8003372:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	b2da      	uxtb	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800337c:	4b10      	ldr	r3, [pc, #64]	; (80033c0 <xPortStartScheduler+0xd8>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a0f      	ldr	r2, [pc, #60]	; (80033c0 <xPortStartScheduler+0xd8>)
 8003382:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003386:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003388:	4b0d      	ldr	r3, [pc, #52]	; (80033c0 <xPortStartScheduler+0xd8>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a0c      	ldr	r2, [pc, #48]	; (80033c0 <xPortStartScheduler+0xd8>)
 800338e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003392:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003394:	f000 f8b0 	bl	80034f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003398:	4b0a      	ldr	r3, [pc, #40]	; (80033c4 <xPortStartScheduler+0xdc>)
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800339e:	f7ff ff93 	bl	80032c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80033a2:	f7ff fbe7 	bl	8002b74 <vTaskSwitchContext>
	prvTaskExitError();
 80033a6:	f7ff ff51 	bl	800324c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	e000e400 	.word	0xe000e400
 80033b8:	200003ac 	.word	0x200003ac
 80033bc:	200003b0 	.word	0x200003b0
 80033c0:	e000ed20 	.word	0xe000ed20
 80033c4:	2000000c 	.word	0x2000000c

080033c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d2:	f383 8811 	msr	BASEPRI, r3
 80033d6:	f3bf 8f6f 	isb	sy
 80033da:	f3bf 8f4f 	dsb	sy
 80033de:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80033e0:	4b0e      	ldr	r3, [pc, #56]	; (800341c <vPortEnterCritical+0x54>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	3301      	adds	r3, #1
 80033e6:	4a0d      	ldr	r2, [pc, #52]	; (800341c <vPortEnterCritical+0x54>)
 80033e8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80033ea:	4b0c      	ldr	r3, [pc, #48]	; (800341c <vPortEnterCritical+0x54>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d10e      	bne.n	8003410 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80033f2:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <vPortEnterCritical+0x58>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d009      	beq.n	8003410 <vPortEnterCritical+0x48>
 80033fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003400:	f383 8811 	msr	BASEPRI, r3
 8003404:	f3bf 8f6f 	isb	sy
 8003408:	f3bf 8f4f 	dsb	sy
 800340c:	603b      	str	r3, [r7, #0]
 800340e:	e7fe      	b.n	800340e <vPortEnterCritical+0x46>
	}
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	bc80      	pop	{r7}
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	2000000c 	.word	0x2000000c
 8003420:	e000ed04 	.word	0xe000ed04

08003424 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800342a:	4b10      	ldr	r3, [pc, #64]	; (800346c <vPortExitCritical+0x48>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d109      	bne.n	8003446 <vPortExitCritical+0x22>
 8003432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003436:	f383 8811 	msr	BASEPRI, r3
 800343a:	f3bf 8f6f 	isb	sy
 800343e:	f3bf 8f4f 	dsb	sy
 8003442:	607b      	str	r3, [r7, #4]
 8003444:	e7fe      	b.n	8003444 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003446:	4b09      	ldr	r3, [pc, #36]	; (800346c <vPortExitCritical+0x48>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	3b01      	subs	r3, #1
 800344c:	4a07      	ldr	r2, [pc, #28]	; (800346c <vPortExitCritical+0x48>)
 800344e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003450:	4b06      	ldr	r3, [pc, #24]	; (800346c <vPortExitCritical+0x48>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d104      	bne.n	8003462 <vPortExitCritical+0x3e>
 8003458:	2300      	movs	r3, #0
 800345a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr
 800346c:	2000000c 	.word	0x2000000c

08003470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003470:	f3ef 8009 	mrs	r0, PSP
 8003474:	f3bf 8f6f 	isb	sy
 8003478:	4b0d      	ldr	r3, [pc, #52]	; (80034b0 <pxCurrentTCBConst>)
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003480:	6010      	str	r0, [r2, #0]
 8003482:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003486:	f04f 0050 	mov.w	r0, #80	; 0x50
 800348a:	f380 8811 	msr	BASEPRI, r0
 800348e:	f7ff fb71 	bl	8002b74 <vTaskSwitchContext>
 8003492:	f04f 0000 	mov.w	r0, #0
 8003496:	f380 8811 	msr	BASEPRI, r0
 800349a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800349e:	6819      	ldr	r1, [r3, #0]
 80034a0:	6808      	ldr	r0, [r1, #0]
 80034a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80034a6:	f380 8809 	msr	PSP, r0
 80034aa:	f3bf 8f6f 	isb	sy
 80034ae:	4770      	bx	lr

080034b0 <pxCurrentTCBConst>:
 80034b0:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80034b4:	bf00      	nop
 80034b6:	bf00      	nop

080034b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
	__asm volatile
 80034be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c2:	f383 8811 	msr	BASEPRI, r3
 80034c6:	f3bf 8f6f 	isb	sy
 80034ca:	f3bf 8f4f 	dsb	sy
 80034ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80034d0:	f7ff fa94 	bl	80029fc <xTaskIncrementTick>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80034da:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <xPortSysTickHandler+0x3c>)
 80034dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034e0:	601a      	str	r2, [r3, #0]
 80034e2:	2300      	movs	r3, #0
 80034e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80034ec:	bf00      	nop
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	e000ed04 	.word	0xe000ed04

080034f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80034fc:	4b0a      	ldr	r3, [pc, #40]	; (8003528 <vPortSetupTimerInterrupt+0x30>)
 80034fe:	2200      	movs	r2, #0
 8003500:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003502:	4b0a      	ldr	r3, [pc, #40]	; (800352c <vPortSetupTimerInterrupt+0x34>)
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003508:	4b09      	ldr	r3, [pc, #36]	; (8003530 <vPortSetupTimerInterrupt+0x38>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a09      	ldr	r2, [pc, #36]	; (8003534 <vPortSetupTimerInterrupt+0x3c>)
 800350e:	fba2 2303 	umull	r2, r3, r2, r3
 8003512:	099b      	lsrs	r3, r3, #6
 8003514:	4a08      	ldr	r2, [pc, #32]	; (8003538 <vPortSetupTimerInterrupt+0x40>)
 8003516:	3b01      	subs	r3, #1
 8003518:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800351a:	4b03      	ldr	r3, [pc, #12]	; (8003528 <vPortSetupTimerInterrupt+0x30>)
 800351c:	2207      	movs	r2, #7
 800351e:	601a      	str	r2, [r3, #0]
}
 8003520:	bf00      	nop
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr
 8003528:	e000e010 	.word	0xe000e010
 800352c:	e000e018 	.word	0xe000e018
 8003530:	20000000 	.word	0x20000000
 8003534:	10624dd3 	.word	0x10624dd3
 8003538:	e000e014 	.word	0xe000e014

0800353c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b08a      	sub	sp, #40	; 0x28
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003544:	2300      	movs	r3, #0
 8003546:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003548:	f7ff f9ae 	bl	80028a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800354c:	4b57      	ldr	r3, [pc, #348]	; (80036ac <pvPortMalloc+0x170>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003554:	f000 f90c 	bl	8003770 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003558:	4b55      	ldr	r3, [pc, #340]	; (80036b0 <pvPortMalloc+0x174>)
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4013      	ands	r3, r2
 8003560:	2b00      	cmp	r3, #0
 8003562:	f040 808c 	bne.w	800367e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d01c      	beq.n	80035a6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800356c:	2208      	movs	r2, #8
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4413      	add	r3, r2
 8003572:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	2b00      	cmp	r3, #0
 800357c:	d013      	beq.n	80035a6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f023 0307 	bic.w	r3, r3, #7
 8003584:	3308      	adds	r3, #8
 8003586:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	2b00      	cmp	r3, #0
 8003590:	d009      	beq.n	80035a6 <pvPortMalloc+0x6a>
	__asm volatile
 8003592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003596:	f383 8811 	msr	BASEPRI, r3
 800359a:	f3bf 8f6f 	isb	sy
 800359e:	f3bf 8f4f 	dsb	sy
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	e7fe      	b.n	80035a4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d068      	beq.n	800367e <pvPortMalloc+0x142>
 80035ac:	4b41      	ldr	r3, [pc, #260]	; (80036b4 <pvPortMalloc+0x178>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d863      	bhi.n	800367e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80035b6:	4b40      	ldr	r3, [pc, #256]	; (80036b8 <pvPortMalloc+0x17c>)
 80035b8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80035ba:	4b3f      	ldr	r3, [pc, #252]	; (80036b8 <pvPortMalloc+0x17c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80035c0:	e004      	b.n	80035cc <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d903      	bls.n	80035de <pvPortMalloc+0xa2>
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f1      	bne.n	80035c2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80035de:	4b33      	ldr	r3, [pc, #204]	; (80036ac <pvPortMalloc+0x170>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d04a      	beq.n	800367e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2208      	movs	r2, #8
 80035ee:	4413      	add	r3, r2
 80035f0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	1ad2      	subs	r2, r2, r3
 8003602:	2308      	movs	r3, #8
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	429a      	cmp	r2, r3
 8003608:	d91e      	bls.n	8003648 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800360a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4413      	add	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	2b00      	cmp	r3, #0
 800361a:	d009      	beq.n	8003630 <pvPortMalloc+0xf4>
 800361c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003620:	f383 8811 	msr	BASEPRI, r3
 8003624:	f3bf 8f6f 	isb	sy
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	613b      	str	r3, [r7, #16]
 800362e:	e7fe      	b.n	800362e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	1ad2      	subs	r2, r2, r3
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003642:	69b8      	ldr	r0, [r7, #24]
 8003644:	f000 f8f6 	bl	8003834 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003648:	4b1a      	ldr	r3, [pc, #104]	; (80036b4 <pvPortMalloc+0x178>)
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	4a18      	ldr	r2, [pc, #96]	; (80036b4 <pvPortMalloc+0x178>)
 8003654:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003656:	4b17      	ldr	r3, [pc, #92]	; (80036b4 <pvPortMalloc+0x178>)
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	4b18      	ldr	r3, [pc, #96]	; (80036bc <pvPortMalloc+0x180>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d203      	bcs.n	800366a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003662:	4b14      	ldr	r3, [pc, #80]	; (80036b4 <pvPortMalloc+0x178>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a15      	ldr	r2, [pc, #84]	; (80036bc <pvPortMalloc+0x180>)
 8003668:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	4b10      	ldr	r3, [pc, #64]	; (80036b0 <pvPortMalloc+0x174>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	431a      	orrs	r2, r3
 8003674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003676:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	2200      	movs	r2, #0
 800367c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800367e:	f7ff f921 	bl	80028c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	2b00      	cmp	r3, #0
 800368a:	d009      	beq.n	80036a0 <pvPortMalloc+0x164>
 800368c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003690:	f383 8811 	msr	BASEPRI, r3
 8003694:	f3bf 8f6f 	isb	sy
 8003698:	f3bf 8f4f 	dsb	sy
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	e7fe      	b.n	800369e <pvPortMalloc+0x162>
	return pvReturn;
 80036a0:	69fb      	ldr	r3, [r7, #28]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3728      	adds	r7, #40	; 0x28
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	20000fbc 	.word	0x20000fbc
 80036b0:	20000fc8 	.word	0x20000fc8
 80036b4:	20000fc0 	.word	0x20000fc0
 80036b8:	20000fb4 	.word	0x20000fb4
 80036bc:	20000fc4 	.word	0x20000fc4

080036c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d046      	beq.n	8003760 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80036d2:	2308      	movs	r3, #8
 80036d4:	425b      	negs	r3, r3
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	4413      	add	r3, r2
 80036da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	4b20      	ldr	r3, [pc, #128]	; (8003768 <vPortFree+0xa8>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4013      	ands	r3, r2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d109      	bne.n	8003702 <vPortFree+0x42>
 80036ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f2:	f383 8811 	msr	BASEPRI, r3
 80036f6:	f3bf 8f6f 	isb	sy
 80036fa:	f3bf 8f4f 	dsb	sy
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	e7fe      	b.n	8003700 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d009      	beq.n	800371e <vPortFree+0x5e>
 800370a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370e:	f383 8811 	msr	BASEPRI, r3
 8003712:	f3bf 8f6f 	isb	sy
 8003716:	f3bf 8f4f 	dsb	sy
 800371a:	60bb      	str	r3, [r7, #8]
 800371c:	e7fe      	b.n	800371c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	4b11      	ldr	r3, [pc, #68]	; (8003768 <vPortFree+0xa8>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4013      	ands	r3, r2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d019      	beq.n	8003760 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d115      	bne.n	8003760 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	4b0b      	ldr	r3, [pc, #44]	; (8003768 <vPortFree+0xa8>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	43db      	mvns	r3, r3
 800373e:	401a      	ands	r2, r3
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003744:	f7ff f8b0 	bl	80028a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	4b07      	ldr	r3, [pc, #28]	; (800376c <vPortFree+0xac>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4413      	add	r3, r2
 8003752:	4a06      	ldr	r2, [pc, #24]	; (800376c <vPortFree+0xac>)
 8003754:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003756:	6938      	ldr	r0, [r7, #16]
 8003758:	f000 f86c 	bl	8003834 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800375c:	f7ff f8b2 	bl	80028c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003760:	bf00      	nop
 8003762:	3718      	adds	r7, #24
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	20000fc8 	.word	0x20000fc8
 800376c:	20000fc0 	.word	0x20000fc0

08003770 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003776:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800377a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800377c:	4b27      	ldr	r3, [pc, #156]	; (800381c <prvHeapInit+0xac>)
 800377e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00c      	beq.n	80037a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	3307      	adds	r3, #7
 800378e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f023 0307 	bic.w	r3, r3, #7
 8003796:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	4a1f      	ldr	r2, [pc, #124]	; (800381c <prvHeapInit+0xac>)
 80037a0:	4413      	add	r3, r2
 80037a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80037a8:	4a1d      	ldr	r2, [pc, #116]	; (8003820 <prvHeapInit+0xb0>)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80037ae:	4b1c      	ldr	r3, [pc, #112]	; (8003820 <prvHeapInit+0xb0>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	4413      	add	r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80037bc:	2208      	movs	r2, #8
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	1a9b      	subs	r3, r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f023 0307 	bic.w	r3, r3, #7
 80037ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4a15      	ldr	r2, [pc, #84]	; (8003824 <prvHeapInit+0xb4>)
 80037d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80037d2:	4b14      	ldr	r3, [pc, #80]	; (8003824 <prvHeapInit+0xb4>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2200      	movs	r2, #0
 80037d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80037da:	4b12      	ldr	r3, [pc, #72]	; (8003824 <prvHeapInit+0xb4>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2200      	movs	r2, #0
 80037e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	1ad2      	subs	r2, r2, r3
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80037f0:	4b0c      	ldr	r3, [pc, #48]	; (8003824 <prvHeapInit+0xb4>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	4a0a      	ldr	r2, [pc, #40]	; (8003828 <prvHeapInit+0xb8>)
 80037fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	4a09      	ldr	r2, [pc, #36]	; (800382c <prvHeapInit+0xbc>)
 8003806:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003808:	4b09      	ldr	r3, [pc, #36]	; (8003830 <prvHeapInit+0xc0>)
 800380a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800380e:	601a      	str	r2, [r3, #0]
}
 8003810:	bf00      	nop
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	bc80      	pop	{r7}
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	200003b4 	.word	0x200003b4
 8003820:	20000fb4 	.word	0x20000fb4
 8003824:	20000fbc 	.word	0x20000fbc
 8003828:	20000fc4 	.word	0x20000fc4
 800382c:	20000fc0 	.word	0x20000fc0
 8003830:	20000fc8 	.word	0x20000fc8

08003834 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800383c:	4b27      	ldr	r3, [pc, #156]	; (80038dc <prvInsertBlockIntoFreeList+0xa8>)
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	e002      	b.n	8003848 <prvInsertBlockIntoFreeList+0x14>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	429a      	cmp	r2, r3
 8003850:	d8f7      	bhi.n	8003842 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	4413      	add	r3, r2
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	429a      	cmp	r2, r3
 8003862:	d108      	bne.n	8003876 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	441a      	add	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	441a      	add	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	429a      	cmp	r2, r3
 8003888:	d118      	bne.n	80038bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	4b14      	ldr	r3, [pc, #80]	; (80038e0 <prvInsertBlockIntoFreeList+0xac>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	429a      	cmp	r2, r3
 8003894:	d00d      	beq.n	80038b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	441a      	add	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	e008      	b.n	80038c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80038b2:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <prvInsertBlockIntoFreeList+0xac>)
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	e003      	b.n	80038c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d002      	beq.n	80038d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038d2:	bf00      	nop
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr
 80038dc:	20000fb4 	.word	0x20000fb4
 80038e0:	20000fbc 	.word	0x20000fbc

080038e4 <__libc_init_array>:
 80038e4:	b570      	push	{r4, r5, r6, lr}
 80038e6:	2500      	movs	r5, #0
 80038e8:	4e0c      	ldr	r6, [pc, #48]	; (800391c <__libc_init_array+0x38>)
 80038ea:	4c0d      	ldr	r4, [pc, #52]	; (8003920 <__libc_init_array+0x3c>)
 80038ec:	1ba4      	subs	r4, r4, r6
 80038ee:	10a4      	asrs	r4, r4, #2
 80038f0:	42a5      	cmp	r5, r4
 80038f2:	d109      	bne.n	8003908 <__libc_init_array+0x24>
 80038f4:	f000 f840 	bl	8003978 <_init>
 80038f8:	2500      	movs	r5, #0
 80038fa:	4e0a      	ldr	r6, [pc, #40]	; (8003924 <__libc_init_array+0x40>)
 80038fc:	4c0a      	ldr	r4, [pc, #40]	; (8003928 <__libc_init_array+0x44>)
 80038fe:	1ba4      	subs	r4, r4, r6
 8003900:	10a4      	asrs	r4, r4, #2
 8003902:	42a5      	cmp	r5, r4
 8003904:	d105      	bne.n	8003912 <__libc_init_array+0x2e>
 8003906:	bd70      	pop	{r4, r5, r6, pc}
 8003908:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800390c:	4798      	blx	r3
 800390e:	3501      	adds	r5, #1
 8003910:	e7ee      	b.n	80038f0 <__libc_init_array+0xc>
 8003912:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003916:	4798      	blx	r3
 8003918:	3501      	adds	r5, #1
 800391a:	e7f2      	b.n	8003902 <__libc_init_array+0x1e>
 800391c:	08003a78 	.word	0x08003a78
 8003920:	08003a78 	.word	0x08003a78
 8003924:	08003a78 	.word	0x08003a78
 8003928:	08003a7c 	.word	0x08003a7c

0800392c <memcpy>:
 800392c:	b510      	push	{r4, lr}
 800392e:	1e43      	subs	r3, r0, #1
 8003930:	440a      	add	r2, r1
 8003932:	4291      	cmp	r1, r2
 8003934:	d100      	bne.n	8003938 <memcpy+0xc>
 8003936:	bd10      	pop	{r4, pc}
 8003938:	f811 4b01 	ldrb.w	r4, [r1], #1
 800393c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003940:	e7f7      	b.n	8003932 <memcpy+0x6>

08003942 <memset>:
 8003942:	4603      	mov	r3, r0
 8003944:	4402      	add	r2, r0
 8003946:	4293      	cmp	r3, r2
 8003948:	d100      	bne.n	800394c <memset+0xa>
 800394a:	4770      	bx	lr
 800394c:	f803 1b01 	strb.w	r1, [r3], #1
 8003950:	e7f9      	b.n	8003946 <memset+0x4>

08003952 <strncmp>:
 8003952:	b510      	push	{r4, lr}
 8003954:	b16a      	cbz	r2, 8003972 <strncmp+0x20>
 8003956:	3901      	subs	r1, #1
 8003958:	1884      	adds	r4, r0, r2
 800395a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800395e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003962:	4293      	cmp	r3, r2
 8003964:	d103      	bne.n	800396e <strncmp+0x1c>
 8003966:	42a0      	cmp	r0, r4
 8003968:	d001      	beq.n	800396e <strncmp+0x1c>
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f5      	bne.n	800395a <strncmp+0x8>
 800396e:	1a98      	subs	r0, r3, r2
 8003970:	bd10      	pop	{r4, pc}
 8003972:	4610      	mov	r0, r2
 8003974:	e7fc      	b.n	8003970 <strncmp+0x1e>
	...

08003978 <_init>:
 8003978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800397a:	bf00      	nop
 800397c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800397e:	bc08      	pop	{r3}
 8003980:	469e      	mov	lr, r3
 8003982:	4770      	bx	lr

08003984 <_fini>:
 8003984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003986:	bf00      	nop
 8003988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800398a:	bc08      	pop	{r3}
 800398c:	469e      	mov	lr, r3
 800398e:	4770      	bx	lr
